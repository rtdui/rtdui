{
  "@rtdui/Dialog": {
    "filePath": "D:/sources/github/rtdui/packages/dialogs/src/Dialog.tsx",
    "description": "",
    "displayName": "@rtdui/Dialog",
    "props": {
      "actions": {
        "defaultValue": null,
        "description": "Dialog actions",
        "name": "actions",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "cancelLabel": {
        "defaultValue": {
          "value": "\"Cancel\""
        },
        "description": "cancel button text for confirm or prompt mode",
        "name": "cancelLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Dialog message, place main text here",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "closeLabel": {
        "defaultValue": {
          "value": "\"Close\""
        },
        "description": "close button text for alert mode",
        "name": "closeLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "confirmLabel": {
        "defaultValue": {
          "value": "\"OK\""
        },
        "description": "confirm button text for confirm or prompt mode",
        "name": "confirmLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultPrompt": {
        "defaultValue": {
          "value": "\"Close\""
        },
        "description": "default prompt text for prompt mode",
        "name": "defaultPrompt",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "dialogId": {
        "defaultValue": null,
        "description": "",
        "name": "dialogId",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "fullScreen": {
        "defaultValue": null,
        "description": "full screen dialog",
        "name": "fullScreen",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "mode": {
        "defaultValue": {
          "value": "\"dialog\""
        },
        "description": "dialog mode",
        "name": "mode",
        "required": false,
        "type": {
          "name": "\"dialog\" | \"alert\" | \"prompt\" | \"confirm\" | undefined",
          "raw": "\"dialog\" | \"alert\" | \"prompt\" | \"confirm\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"prompt\""
            },
            {
              "value": "\"confirm\""
            }
          ]
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when close button is clicked",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "((result?: any) => void) | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ closeBtn?: string | undefined; dialogTitle?: string | undefined; title?: string | undefined; dialogContent?: string | undefined; dialogAction?: string | undefined; okBtn?: string | undefined; cancelBtn?: string | undefined; } | undefined"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Dialog title, displayed before body",
        "name": "title",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "withCloseButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether close button should be visible in title",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "@rtdui/DialogContainer": {
    "filePath": "D:/sources/github/rtdui/packages/dialogs/src/DialogContainer.tsx",
    "description": "",
    "displayName": "@rtdui/DialogContainer",
    "props": {
      "actions": {
        "defaultValue": null,
        "description": "Dialog actions",
        "name": "actions",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "cancelLabel": {
        "defaultValue": {
          "value": "\"Cancel\""
        },
        "description": "cancel button text for confirm or prompt mode",
        "name": "cancelLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "closeLabel": {
        "defaultValue": {
          "value": "\"Close\""
        },
        "description": "close button text for alert mode",
        "name": "closeLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "confirmLabel": {
        "defaultValue": {
          "value": "\"OK\""
        },
        "description": "confirm button text for confirm or prompt mode",
        "name": "confirmLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "",
        "name": "content",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "defaultPrompt": {
        "defaultValue": {
          "value": "\"Close\""
        },
        "description": "default prompt text for prompt mode",
        "name": "defaultPrompt",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "dialogId": {
        "defaultValue": null,
        "description": "",
        "name": "dialogId",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "dirtyWarningLabel": {
        "defaultValue": null,
        "description": "",
        "name": "dirtyWarningLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "fullScreen": {
        "defaultValue": null,
        "description": "full screen dialog",
        "name": "fullScreen",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "isDirty": {
        "defaultValue": null,
        "description": "",
        "name": "isDirty",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "mode": {
        "defaultValue": {
          "value": "\"dialog\""
        },
        "description": "dialog mode",
        "name": "mode",
        "required": false,
        "type": {
          "name": "\"dialog\" | \"alert\" | \"prompt\" | \"confirm\" | undefined",
          "raw": "\"dialog\" | \"alert\" | \"prompt\" | \"confirm\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"prompt\""
            },
            {
              "value": "\"confirm\""
            }
          ]
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when close button is clicked",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "((result?: any) => void) | undefined"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "",
        "name": "onOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ closeBtn?: string | undefined; dialogTitle?: string | undefined; title?: string | undefined; dialogContent?: string | undefined; dialogAction?: string | undefined; okBtn?: string | undefined; cancelBtn?: string | undefined; } | undefined"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Dialog title, displayed before body",
        "name": "title",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "withCloseButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether close button should be visible in title",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "Dialogs": {
    "filePath": "D:/sources/github/rtdui/packages/dialogs/src/Dialogs.tsx",
    "description": "该组件只能使用一次. 通常作为React项目根组件的第一个孩子.",
    "displayName": "Dialogs",
    "props": {
      "dirtyWarningLabel": {
        "defaultValue": null,
        "description": "Warning label when content is dirty",
        "name": "dirtyWarningLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Target element of Portal component",
        "name": "target",
        "required": false,
        "type": {
          "name": "string | HTMLElement | undefined"
        }
      }
    }
  },
  "Editor": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/Editor.tsx",
    "description": "",
    "displayName": "@rtdui/md-editor/Editor",
    "props": {}
  },
  "MdEditor": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/MdEditor.tsx",
    "description": "",
    "displayName": "@rtdui/md-editor/MdEditor",
    "props": {
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "handleImageUpload": {
        "defaultValue": null,
        "description": "",
        "name": "handleImageUpload",
        "required": false,
        "type": {
          "name": "((files: File[], ev: EditorView) => Promise<UploadResult[]>) | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "mode": {
        "defaultValue": {
          "value": "\"auto\""
        },
        "description": "responsive width when auto mode\neditor layout mode",
        "name": "mode",
        "required": false,
        "type": {
          "name": "Mode | undefined",
          "raw": "Mode | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"split\""
            }
          ]
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((val: string) => void) | undefined"
        }
      },
      "plugins": {
        "defaultValue": null,
        "description": "Plugin list",
        "name": "plugins",
        "required": false,
        "type": {
          "name": "Plugin[] | undefined"
        }
      },
      "remarkRehypeOptions": {
        "defaultValue": null,
        "description": "custom remark-rehype options: Defaults value { allowDangerousHtml: true }\n\nhttps://github.com/remarkjs/remark-rehype",
        "name": "remarkRehypeOptions",
        "required": false,
        "type": {
          "name": "Options | undefined"
        }
      },
      "responsiveWidth": {
        "defaultValue": {
          "value": "640"
        },
        "description": "responsive width when auto mode",
        "name": "responsiveWidth",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "sanitize": {
        "defaultValue": null,
        "description": "Sanitize strategy: Defaults to GitHub style sanitation with class names allowed\n\nhttps://github.com/syntax-tree/hast-util-sanitize/blob/main/lib/github.json\n\nIf you want further customization, pass a function to mutate sanitize schema.",
        "name": "sanitize",
        "required": false,
        "type": {
          "name": "((schema: Schema) => Schema) | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ toolbar?: string | undefined; editorWrapper?: string | undefined; editor?: string | undefined; preview?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "MdViewer": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/MdViewer.tsx",
    "description": "",
    "displayName": "@rtdui/md-editor/MdViewer",
    "props": {
      "locale": {
        "defaultValue": null,
        "description": "",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "plugins": {
        "defaultValue": null,
        "description": "Plugin list",
        "name": "plugins",
        "required": false,
        "type": {
          "name": "Plugin[] | undefined"
        }
      },
      "remarkRehypeOptions": {
        "defaultValue": null,
        "description": "custom remark-rehype options: Defaults value { allowDangerousHtml: true }\n\nhttps://github.com/remarkjs/remark-rehype",
        "name": "remarkRehypeOptions",
        "required": false,
        "type": {
          "name": "Options | undefined"
        }
      },
      "sanitize": {
        "defaultValue": null,
        "description": "Sanitize strategy: Defaults to GitHub style sanitation with class names allowed\n\nhttps://github.com/syntax-tree/hast-util-sanitize/blob/main/lib/github.json\n\nIf you want further customization, pass a function to mutate sanitize schema.",
        "name": "sanitize",
        "required": false,
        "type": {
          "name": "((schema: Schema) => Schema) | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "Preview": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/Preview.tsx",
    "description": "",
    "displayName": "@rtdui/md-editor/Preview",
    "props": {}
  },
  "Sidebar": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/Sidebar.tsx",
    "description": "",
    "displayName": "Sidebar",
    "props": {
      "activedSidebar": {
        "defaultValue": null,
        "description": "",
        "name": "activedSidebar",
        "required": false,
        "type": {
          "name": "ActivedSidebar | undefined",
          "raw": "ActivedSidebar | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"toc\""
            },
            {
              "value": "\"help\""
            }
          ]
        }
      }
    }
  },
  "Statusbar": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/Statusbar.tsx",
    "description": "",
    "displayName": "@rtdui/md-editor/Statusbar",
    "props": {}
  },
  "Toolbar": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/Toolbar.tsx",
    "description": "",
    "displayName": "@rtdui/md-editor/Toolbar",
    "props": {}
  },
  "Notification": {
    "filePath": "D:/sources/github/rtdui/packages/notifications/src/Notification.tsx",
    "description": "",
    "displayName": "Notification",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Notification message, place main text here",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Notification color",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"transparent\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"transparent\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"transparent\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Notification icon, replaces color line",
        "name": "icon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Replaces colored line or icon with Loader component",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when close button is clicked",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ icon?: string | undefined; title?: string | undefined; content?: string | undefined; closeBtn?: string | undefined; } | undefined"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Notification title, displayed before body",
        "name": "title",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "withCloseButton": {
        "defaultValue": null,
        "description": "Determines whether close button should be visible, true by default",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "@rtdui/NotificationContainer": {
    "filePath": "D:/sources/github/rtdui/packages/notifications/src/NotificationContainer.tsx",
    "description": "",
    "displayName": "@rtdui/NotificationContainer",
    "props": {
      "autoClose": {
        "defaultValue": null,
        "description": "",
        "name": "autoClose",
        "required": true,
        "type": {
          "name": "number | false"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Notification message, place main text here",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Notification color",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"transparent\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"transparent\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"transparent\""
            }
          ]
        }
      },
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "required": true,
        "type": {
          "name": "NotificationData"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Notification icon, replaces color line",
        "name": "icon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Replaces colored line or icon with Loader component",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when close button is clicked",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onHide": {
        "defaultValue": null,
        "description": "",
        "name": "onHide",
        "required": true,
        "type": {
          "name": "(id: string) => void"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ icon?: string | undefined; title?: string | undefined; content?: string | undefined; closeBtn?: string | undefined; } | undefined"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Notification title, displayed before body",
        "name": "title",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "withCloseButton": {
        "defaultValue": null,
        "description": "Determines whether close button should be visible, true by default",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "Notifications": {
    "filePath": "D:/sources/github/rtdui/packages/notifications/src/Notifications.tsx",
    "description": "该组件只能使用一次. 通常作为React项目根组件的第一个孩子.",
    "displayName": "Notifications",
    "props": {
      "autoClose": {
        "defaultValue": {
          "value": "4000"
        },
        "description": "Auto close timeout for all notifications, false to disable auto close, can be overwritten for individual notifications by notifications.show function",
        "name": "autoClose",
        "required": false,
        "type": {
          "name": "number | false | undefined"
        }
      },
      "limit": {
        "defaultValue": {
          "value": "5"
        },
        "description": "Maximum amount of notifications displayed at a time, other new notifications will be added to queue",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Target element of Portal component",
        "name": "target",
        "required": false,
        "type": {
          "name": "string | HTMLElement | undefined"
        }
      },
      "transitionDuration": {
        "defaultValue": {
          "value": "250"
        },
        "description": "Notification transitions duration, 0 to turn transitions off",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      }
    }
  },
  "SignaturePad": {
    "filePath": "D:/sources/github/rtdui/packages/signature-pad/src/SignaturePad.tsx",
    "description": "",
    "displayName": "@rtdui/signature-pad/SignaturePad",
    "props": {
      "backgroundColor": {
        "defaultValue": {
          "value": "\"transparent\""
        },
        "description": "Color used to canvas the background. Can be any color format accepted by context.fillStyle.\nUse a non-transparent color e.g. \"rgb(255,255,255)\" if you'd like to save signatures as JPEG images.",
        "name": "backgroundColor",
        "required": false,
        "type": {
          "name": "Fill | undefined"
        }
      },
      "canvasContextOptions": {
        "defaultValue": null,
        "description": "",
        "name": "canvasContextOptions",
        "required": false,
        "type": {
          "name": "CanvasRenderingContext2DSettings | undefined"
        }
      },
      "clearLabel": {
        "defaultValue": {
          "value": "\"Clear\""
        },
        "description": "clear button text, can be localized",
        "name": "clearLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "confirmLabel": {
        "defaultValue": {
          "value": "\"Confirm\""
        },
        "description": "confirm button text, can be localized",
        "name": "confirmLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "dotSize": {
        "defaultValue": {
          "value": "(minWidth + maxWidth) / 2"
        },
        "description": "Radius of a single dot. Also the width of the start of a mark.",
        "name": "dotSize",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "height": {
        "defaultValue": {
          "value": "150"
        },
        "description": "canvas height",
        "name": "height",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "maxWidth": {
        "defaultValue": {
          "value": "2.5"
        },
        "description": "Maximum width of a line",
        "name": "maxWidth",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "minDistance": {
        "defaultValue": {
          "value": "5"
        },
        "description": "Add the next point only if the previous one is farther than x pixels.",
        "name": "minDistance",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "minWidth": {
        "defaultValue": {
          "value": "0.5"
        },
        "description": "Minimum width of a line",
        "name": "minWidth",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "",
        "name": "onClear",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onConfirm": {
        "defaultValue": null,
        "description": "",
        "name": "onConfirm",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "penColor": {
        "defaultValue": {
          "value": "\"black\""
        },
        "description": "Color used to draw the lines. Can be any color format accepted by context.fillStyle. Defaults to \"black\"",
        "name": "penColor",
        "required": false,
        "type": {
          "name": "Fill | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ canvasWrapper?: string | undefined; actions?: string | undefined; clearBtn?: string | undefined; confirmBtn?: string | undefined; } | undefined"
        }
      },
      "throttle": {
        "defaultValue": {
          "value": "16"
        },
        "description": "Draw the next point at most once in milliseconds. Set it to 0 to turn off throttling",
        "name": "throttle",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "velocityFilterWeight": {
        "defaultValue": {
          "value": "0.7"
        },
        "description": "Weight used to modify new velocity based on the previous velocity",
        "name": "velocityFilterWeight",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "width": {
        "defaultValue": {
          "value": "300"
        },
        "description": "canvas width",
        "name": "width",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "withClear": {
        "defaultValue": null,
        "description": "",
        "name": "withClear",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "@rtdui/Spotlight": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/Spotlight.tsx",
    "description": "",
    "displayName": "@rtdui/Spotlight",
    "props": {
      "actions": {
        "defaultValue": null,
        "description": "Actions data, passed down to <code>Spotlight.Action</code> component",
        "name": "actions",
        "required": true,
        "type": {
          "name": "SpotlightActions[]"
        }
      },
      "clearQueryOnClose": {
        "defaultValue": null,
        "description": "Determines whether the search query should be cleared when the spotlight is closed, <code>true</code> by default",
        "name": "clearQueryOnClose",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnActionTrigger": {
        "defaultValue": null,
        "description": "Determines whether spotlight should be closed when one of the actions is triggered, <code>true</code> by default",
        "name": "closeOnActionTrigger",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "If set, spotlight will not be rendered",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function to filter actions data based on search query, by default actions are filtered by title, description and keywords",
        "name": "filter",
        "required": false,
        "type": {
          "name": "SpotlightFilterFunction | undefined"
        }
      },
      "forceOpened": {
        "defaultValue": null,
        "description": "Forces opened state, useful for tests",
        "name": "forceOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "highlightQuery": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether search query should be highlighted in action label",
        "name": "highlightQuery",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "limit": {
        "defaultValue": {
          "value": "Infinity"
        },
        "description": "Maximum number of actions displayed at a time",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "Spotlight content max-height. Ignored unless <code>scrollable</code> prop is set. <code>400</code> by default",
        "name": "maxHeight",
        "required": false,
        "type": {
          "name": "MaxHeight<string | number> | undefined"
        }
      },
      "nothingFound": {
        "defaultValue": null,
        "description": "Message displayed when none of the actions match given <code>filter</code>",
        "name": "nothingFound",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "onQueryChange": {
        "defaultValue": null,
        "description": "Called when query changes",
        "name": "onQueryChange",
        "required": false,
        "type": {
          "name": "((query: string) => void) | undefined"
        }
      },
      "onSpotlightClose": {
        "defaultValue": null,
        "description": "Called when spotlight closes",
        "name": "onSpotlightClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onSpotlightOpen": {
        "defaultValue": null,
        "description": "Called when spotlight opens",
        "name": "onSpotlightOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "query": {
        "defaultValue": null,
        "description": "Controlled Spotlight search query",
        "name": "query",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "scrollable": {
        "defaultValue": null,
        "description": "Determines whether the actions list should be scrollable. If not set, <code>maxHeight</code> is ignored, <code>false</code> by default",
        "name": "scrollable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "searchProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Spotlight.Search</code>",
        "name": "searchProps",
        "required": false,
        "type": {
          "name": "SpotlightSearchProps | undefined"
        }
      },
      "shortcut": {
        "defaultValue": null,
        "description": "Keyboard shortcut or a list of shortcuts to trigger spotlight, <code>'mod + K'</code> by default",
        "name": "shortcut",
        "required": false,
        "type": {
          "name": "string | string[] | null | undefined"
        }
      },
      "store": {
        "defaultValue": null,
        "description": "Spotlight store, can be used to create multiple instances of spotlight",
        "name": "store",
        "required": false,
        "type": {
          "name": "SpotlightStore | undefined"
        }
      },
      "tagsToIgnore": {
        "defaultValue": null,
        "description": "A list of tags which when focused will be ignored by shortcut, <code>['input', 'textarea', 'select']</code> by default",
        "name": "tagsToIgnore",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "triggerOnContentEditable": {
        "defaultValue": null,
        "description": "Determines whether shortcut should trigger based in contentEditable, <code>false</code> by default",
        "name": "triggerOnContentEditable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "@rtdui/SpotlightAction": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/SpotlightAction.tsx",
    "description": "",
    "displayName": "@rtdui/SpotlightAction",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Children override default action elements, if passed, label, description and sections are hidden",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "closeSpotlightOnTrigger": {
        "defaultValue": null,
        "description": "Determines whether the spotlight should be closed when action is triggered, overrides <code>closeOnActionTrigger</code> prop set on <code>Spotlight</code>",
        "name": "closeSpotlightOnTrigger",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Action description, pass string to use in default filter",
        "name": "description",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "dimmedSections": {
        "defaultValue": null,
        "description": "Determines whether left and right sections should have dimmed styles, <code>true</code> by default",
        "name": "dimmedSections",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "highlightColor": {
        "defaultValue": null,
        "description": "Key of <code>theme.colors</code> of any valid CSS color that will be used to highlight search query, <code>'yellow'</code> by default",
        "name": "highlightColor",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "highlightQuery": {
        "defaultValue": null,
        "description": "Determines whether search query should be highlighted in action label, <code>false</code> by default",
        "name": "highlightQuery",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "keywords": {
        "defaultValue": null,
        "description": "Keywords that are used for default filtering, not displayed anywhere, can be a string: \"react,router,javascript\" or an array: ['react', 'router', 'javascript']",
        "name": "keywords",
        "required": false,
        "type": {
          "name": "string | string[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Action label, pass string to use in default filter",
        "name": "label",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Section displayed on the left side of the label, for example, icon",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Section displayed on the right side of the label, for example, hotkey",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "@rtdui/SpotlightActionsGroup": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/SpotlightActionsGroup.tsx",
    "description": "",
    "displayName": "@rtdui/SpotlightActionsGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<code>Spotlight.Action</code> components",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Group label",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "@rtdui/SpotlightActionsList": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/SpotlightActionsList.tsx",
    "description": "",
    "displayName": "@rtdui/SpotlightActionsList",
    "props": {}
  },
  "@rtdui/SpotlightEmpty": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/SpotlightEmpty.tsx",
    "description": "",
    "displayName": "@rtdui/SpotlightEmpty",
    "props": {}
  },
  "@rtdui/SpotlightFooter": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/SpotlightFooter.tsx",
    "description": "",
    "displayName": "@rtdui/SpotlightFooter",
    "props": {}
  },
  "@rtdui/SpotlightRoot": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/SpotlightRoot.tsx",
    "description": "",
    "displayName": "@rtdui/SpotlightRoot",
    "props": {
      "clearQueryOnClose": {
        "defaultValue": null,
        "description": "Determines whether the search query should be cleared when the spotlight is closed, <code>true</code> by default",
        "name": "clearQueryOnClose",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnActionTrigger": {
        "defaultValue": null,
        "description": "Determines whether spotlight should be closed when one of the actions is triggered, <code>true</code> by default",
        "name": "closeOnActionTrigger",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "If set, spotlight will not be rendered",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "forceOpened": {
        "defaultValue": null,
        "description": "Forces opened state, useful for tests",
        "name": "forceOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "Spotlight content max-height. Ignored unless <code>scrollable</code> prop is set. <code>400</code> by default",
        "name": "maxHeight",
        "required": false,
        "type": {
          "name": "MaxHeight<string | number> | undefined"
        }
      },
      "onQueryChange": {
        "defaultValue": null,
        "description": "Called when query changes",
        "name": "onQueryChange",
        "required": false,
        "type": {
          "name": "((query: string) => void) | undefined"
        }
      },
      "onSpotlightClose": {
        "defaultValue": null,
        "description": "Called when spotlight closes",
        "name": "onSpotlightClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onSpotlightOpen": {
        "defaultValue": null,
        "description": "Called when spotlight opens",
        "name": "onSpotlightOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "query": {
        "defaultValue": null,
        "description": "Controlled Spotlight search query",
        "name": "query",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "scrollable": {
        "defaultValue": null,
        "description": "Determines whether the actions list should be scrollable. If not set, <code>maxHeight</code> is ignored, <code>false</code> by default",
        "name": "scrollable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "shortcut": {
        "defaultValue": null,
        "description": "Keyboard shortcut or a list of shortcuts to trigger spotlight, <code>'mod + K'</code> by default",
        "name": "shortcut",
        "required": false,
        "type": {
          "name": "string | string[] | null | undefined"
        }
      },
      "store": {
        "defaultValue": null,
        "description": "Spotlight store, can be used to create multiple instances of spotlight",
        "name": "store",
        "required": false,
        "type": {
          "name": "SpotlightStore | undefined"
        }
      },
      "tagsToIgnore": {
        "defaultValue": null,
        "description": "A list of tags which when focused will be ignored by shortcut, <code>['input', 'textarea', 'select']</code> by default",
        "name": "tagsToIgnore",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "triggerOnContentEditable": {
        "defaultValue": null,
        "description": "Determines whether shortcut should trigger based in contentEditable, <code>false</code> by default",
        "name": "triggerOnContentEditable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "@rtdui/SpotlightSearch": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/SpotlightSearch.tsx",
    "description": "",
    "displayName": "@rtdui/SpotlightSearch",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/CodeHighlight": {
    "filePath": "D:/sources/github/rtdui/packages/code-highlight/src/CodeHighlight/CodeHighlight.tsx",
    "description": "",
    "displayName": "@rtdui/CodeHighlight",
    "props": {
      "bad": {
        "defaultValue": {
          "value": "false"
        },
        "description": "坏的范例",
        "name": "bad",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "code": {
        "defaultValue": null,
        "description": "Code to highlight",
        "name": "code",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "copiedLabel": {
        "defaultValue": {
          "value": "'Copied'"
        },
        "description": "Copied tooltip label",
        "name": "copiedLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "copyLabel": {
        "defaultValue": {
          "value": "'Copy code'"
        },
        "description": "Copy tooltip label",
        "name": "copyLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "diff": {
        "defaultValue": null,
        "description": "是否启用diff形式",
        "name": "diff",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "highlingtLines": {
        "defaultValue": null,
        "description": "字符串范围表示的需要突出显示的行\n如: {1,3-4}",
        "name": "highlingtLines",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "language": {
        "defaultValue": {
          "value": "tsx"
        },
        "description": "Code language",
        "name": "language",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "showLineNumbers": {
        "defaultValue": {
          "value": "false"
        },
        "description": "是否显示行号",
        "name": "showLineNumbers",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCopyButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether copy button should be displayed",
        "name": "withCopyButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "Accordion": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Accordion/Accordion.tsx",
    "description": "",
    "displayName": "Accordion",
    "props": {
      "expandIcon": {
        "defaultValue": null,
        "description": "展开的图标",
        "name": "expandIcon",
        "required": false,
        "type": {
          "name": "\"arrow\" | \"plus\" | undefined",
          "raw": "\"arrow\" | \"plus\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"arrow\""
            },
            {
              "value": "\"plus\""
            }
          ]
        }
      },
      "initExpandIndex": {
        "defaultValue": null,
        "description": "初始展开的项索引",
        "name": "initExpandIndex",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "项数组",
        "name": "items",
        "required": true,
        "type": {
          "name": "{ [key: string]: any; title: ReactNode; content: ReactNode; }[]"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ itemRoot?: string | undefined; itemTitle?: string | undefined; itemContent?: string | undefined; } | undefined"
        }
      }
    }
  },
  "@rtdui/Affix": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Affix/Affix.tsx",
    "description": "",
    "displayName": "@rtdui/Affix",
    "props": {
      "position": {
        "defaultValue": {
          "value": "{ bottom: 24, right: 16 }"
        },
        "description": "Affix position on screen",
        "name": "position",
        "required": false,
        "type": {
          "name": "{ top?: string | number | undefined; left?: string | number | undefined; bottom?: string | number | undefined; right?: string | number | undefined; } | undefined"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "200"
        },
        "description": "Root element <code>z-index</code> property,",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "@rtdui/Alert": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Alert/Alert.tsx",
    "description": "",
    "displayName": "@rtdui/Alert",
    "props": {
      "actions": {
        "defaultValue": null,
        "description": "",
        "name": "actions",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": true,
        "type": {
          "name": "\"info\" | \"success\" | \"warning\" | \"error\"",
          "raw": "\"info\" | \"success\" | \"warning\" | \"error\"",
          "value": [
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "content": {
        "defaultValue": null,
        "description": "",
        "name": "content",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ actions?: string | undefined; body?: string | undefined; title?: string | undefined; content?: string | undefined; } | undefined"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "@rtdui/AppShell": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/AppShell/AppShell.tsx",
    "description": "",
    "displayName": "@rtdui/AppShell",
    "props": {
      "drawer": {
        "defaultValue": null,
        "description": "",
        "name": "drawer",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> | undefined"
        }
      },
      "footer": {
        "defaultValue": null,
        "description": "",
        "name": "footer",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> | undefined"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "",
        "name": "header",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> | undefined"
        }
      },
      "main": {
        "defaultValue": null,
        "description": "",
        "name": "main",
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> | undefined"
        }
      },
      "responsive": {
        "defaultValue": {
          "value": "\"lg\""
        },
        "description": "响应式断点",
        "name": "responsive",
        "required": false,
        "type": {
          "name": "\"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "raw": "\"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ body?: string | undefined; header?: string | undefined; main?: string | undefined; footer?: string | undefined; side?: string | undefined; drawer?: string | undefined; } | undefined"
        }
      }
    }
  },
  "@rtdui/AspectRatio": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/AspectRatio/AspectRatio.tsx",
    "description": "",
    "displayName": "@rtdui/AspectRatio",
    "props": {
      "ratio": {
        "defaultValue": {
          "value": "1"
        },
        "description": "宽高比, 如: 16 / 9, 4 / 3, 1920 / 1080\n取值\n@link https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
        "name": "ratio",
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "AutoComplete": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/AutoComplete/AutoComplete.tsx",
    "description": "",
    "displayName": "@rtdui/core/AutoComplete",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "comboboxProps": {
        "defaultValue": null,
        "description": "Props passed down to <code>Combobox</code> component",
        "name": "comboboxProps",
        "required": false,
        "type": {
          "name": "ComboboxProps | undefined"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data displayed in the dropdown",
        "name": "data",
        "required": false,
        "type": {
          "name": "ComboboxStringData | undefined"
        }
      },
      "defaultDropdownOpened": {
        "defaultValue": null,
        "description": "Uncontrolled dropdown initial opened state",
        "name": "defaultDropdownOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownOpened": {
        "defaultValue": null,
        "description": "Controlled dropdown opened state",
        "name": "dropdownOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function based on which items are filtered and sorted",
        "name": "filter",
        "required": false,
        "type": {
          "name": "OptionsFilter | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Maximum number of options displayed at a time, <code>Infinity</code> by default",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "maxDropdownHeight": {
        "defaultValue": null,
        "description": "<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default",
        "name": "maxDropdownHeight",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((val: string) => void) | undefined"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onOptionSubmit": {
        "defaultValue": null,
        "description": "Called when option is submitted from dropdown with mouse click or <code>Enter</code> key",
        "name": "onOptionSubmit",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderOption": {
        "defaultValue": null,
        "description": "A function to render content of the option, replaces the default content of the option",
        "name": "renderOption",
        "required": false,
        "type": {
          "name": "((input: ComboboxLikeRenderOptionInput<ComboboxStringItem>) => ReactNode) | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "selectFirstOptionOnChange": {
        "defaultValue": null,
        "description": "Determines whether the first option should be selected when value changes, <code>false</code> by default",
        "name": "selectFirstOptionOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withScrollArea": {
        "defaultValue": null,
        "description": "Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default",
        "name": "withScrollArea",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/Avatar": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Avatar/Avatar.tsx",
    "description": "",
    "displayName": "@rtdui/Avatar",
    "props": {
      "mask": {
        "defaultValue": null,
        "description": "",
        "name": "mask",
        "required": false,
        "type": {
          "name": "\"squircle\" | \"heart\" | \"star\" | \"triangle\" | \"diamond\" | \"pentagon\" | \"hexagon\" | \"hexagon2\" | \"decagon\" | undefined",
          "raw": "\"squircle\" | \"heart\" | \"star\" | \"triangle\" | \"diamond\" | \"pentagon\" | \"hexagon\" | \"hexagon2\" | \"decagon\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"squircle\""
            },
            {
              "value": "\"heart\""
            },
            {
              "value": "\"star\""
            },
            {
              "value": "\"triangle\""
            },
            {
              "value": "\"diamond\""
            },
            {
              "value": "\"pentagon\""
            },
            {
              "value": "\"hexagon\""
            },
            {
              "value": "\"hexagon2\""
            },
            {
              "value": "\"decagon\""
            }
          ]
        }
      },
      "online": {
        "defaultValue": null,
        "description": "",
        "name": "online",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "只显示一些字符, src属性的优先级比placeholder属性高. 不建议超过两个字符",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ wrapper?: string | undefined; } | undefined"
        }
      },
      "src": {
        "defaultValue": null,
        "description": "头像的url",
        "name": "src",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "circle"
        },
        "description": "方形或圆形变体",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"circle\" | \"square\" | undefined",
          "raw": "\"circle\" | \"square\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"square\""
            }
          ]
        }
      }
    }
  },
  "@rtdui/AvatarGroup": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/AvatarGroup/AvatarGroup.tsx",
    "description": "",
    "displayName": "@rtdui/AvatarGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "avatars",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "",
        "name": "max",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      }
    }
  },
  "Badge": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Badge/Badge.tsx",
    "description": "多态组件, ref会转发给实际的组件",
    "displayName": "Badge",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "theme color",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "ghost": {
        "defaultValue": null,
        "description": "no background and no border",
        "name": "ghost",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "outline": {
        "defaultValue": null,
        "description": "border without background",
        "name": "outline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "尺寸大小",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"default\""
        },
        "description": "style variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      }
    }
  },
  "@rtdui/Button": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Button/Button.tsx",
    "description": "ref属性会转发至button元素",
    "displayName": "@rtdui/Button",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "endIcon": {
        "defaultValue": null,
        "description": "右侧图标元素",
        "name": "endIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "full width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "ghost": {
        "defaultValue": null,
        "description": "无边框和背景",
        "name": "ghost",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "glass": {
        "defaultValue": null,
        "description": "毛玻璃效果,需要有背景才有效果",
        "name": "glass",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "link": {
        "defaultValue": null,
        "description": "link样式的按钮",
        "name": "link",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "是否在左侧显示加载动画图标",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "loadingPosition": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "加载动画图标的显示位置",
        "name": "loadingPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | undefined",
          "raw": "\"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "noAnimation": {
        "defaultValue": null,
        "description": "无点击动画",
        "name": "noAnimation",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "outline": {
        "defaultValue": null,
        "description": "边框按钮",
        "name": "outline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "sharp": {
        "defaultValue": null,
        "description": "矩形或圆形, 用于单字符或图标",
        "name": "sharp",
        "required": false,
        "type": {
          "name": "\"circle\" | \"square\" | undefined",
          "raw": "\"circle\" | \"square\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"square\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "尺寸大小",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "startIcon": {
        "defaultValue": null,
        "description": "左侧图标元素",
        "name": "startIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "@rtdui/ButtonCheckbox": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ButtonCheckbox/ButtonCheckbox.tsx",
    "description": "ref属性会转发至内部的input元素",
    "displayName": "@rtdui/ButtonCheckbox",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "full width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "ghost": {
        "defaultValue": null,
        "description": "无边框和背景",
        "name": "ghost",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "glass": {
        "defaultValue": null,
        "description": "毛玻璃效果,需要有背景才有效果",
        "name": "glass",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "link": {
        "defaultValue": null,
        "description": "link样式的按钮",
        "name": "link",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((checked: boolean) => void) | undefined"
        }
      },
      "outline": {
        "defaultValue": null,
        "description": "边框按钮",
        "name": "outline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "sharp": {
        "defaultValue": null,
        "description": "矩形或圆形, 用于单字符或图标",
        "name": "sharp",
        "required": false,
        "type": {
          "name": "\"circle\" | \"square\" | undefined",
          "raw": "\"circle\" | \"square\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"square\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "尺寸大小",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      }
    }
  },
  "@rtdui/Card": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Card/Card.tsx",
    "description": "ref属性会转发至内部的根div元素",
    "displayName": "@rtdui/Card",
    "props": {
      "action": {
        "defaultValue": null,
        "description": "",
        "name": "action",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "",
        "name": "content",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "glass": {
        "defaultValue": null,
        "description": "",
        "name": "glass",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "imagePositon": {
        "defaultValue": {
          "value": "\"top\""
        },
        "description": "image positon",
        "name": "imagePositon",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"overlay\" | undefined",
          "raw": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"overlay\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"top\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"overlay\""
            }
          ]
        }
      },
      "imageSrc": {
        "defaultValue": null,
        "description": "",
        "name": "imageSrc",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ figure?: string | undefined; body?: string | undefined; title?: string | undefined; content?: string | undefined; actions?: string | undefined; } | undefined"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "@rtdui/Carousel": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Carousel/Carousel.tsx",
    "description": "",
    "displayName": "@rtdui/Carousel",
    "props": {
      "indicator": {
        "defaultValue": {
          "value": "arrow"
        },
        "description": "变体, arrow使用next/prev箭头按钮切换. number使用数字按钮切换",
        "name": "indicator",
        "required": false,
        "type": {
          "name": "\"number\" | \"arrow\" | undefined",
          "raw": "\"number\" | \"arrow\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"number\""
            },
            {
              "value": "\"arrow\""
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "",
        "name": "items",
        "required": true,
        "type": {
          "name": "{ imageSrc: string; }[]"
        }
      }
    }
  },
  "@rtdui/Checkbox": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Checkbox/Checkbox.tsx",
    "description": "ref属性会转发至内部的input元素",
    "displayName": "@rtdui/Checkbox",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "helperText": {
        "defaultValue": null,
        "description": "",
        "name": "helperText",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((checked: boolean) => void) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ input?: string | undefined; label?: string | undefined; helperText?: string | undefined; } | undefined"
        }
      }
    }
  },
  "@rtdui/Chip": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Chip/Chip.tsx",
    "description": "ref属性会转发至内部的button元素",
    "displayName": "@rtdui/Chip",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "deleteIcon": {
        "defaultValue": null,
        "description": "",
        "name": "deleteIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "onDelete": {
        "defaultValue": null,
        "description": "",
        "name": "onDelete",
        "required": false,
        "type": {
          "name": "((e?: any) => void) | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"normal\""
        },
        "description": "尺寸",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"small\" | \"normal\" | undefined",
          "raw": "\"small\" | \"normal\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"normal\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ label?: string | undefined; deleteBtn?: string | undefined; } | undefined"
        }
      },
      "startIcon": {
        "defaultValue": null,
        "description": "",
        "name": "startIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "ChipsInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ChipsInput/ChipsInput.tsx",
    "description": "",
    "displayName": "@rtdui/core/ChipsInput",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "CloseButton": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/CloseButton/CloseButton.tsx",
    "description": "",
    "displayName": "@rtdui/core/CloseButton",
    "props": {
      "iconProps": {
        "defaultValue": {
          "value": "{size:\"sm\"}"
        },
        "description": "",
        "name": "iconProps",
        "required": false,
        "type": {
          "name": "IconProps | undefined"
        }
      },
      "sharp": {
        "defaultValue": {
          "value": "\"circle\""
        },
        "description": "",
        "name": "sharp",
        "required": false,
        "type": {
          "name": "\"circle\" | \"square\" | undefined",
          "raw": "\"circle\" | \"square\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"square\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "ThemeBaseSize | undefined",
          "raw": "ThemeBaseSize | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      }
    }
  },
  "ColorInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorInput/ColorInput.tsx",
    "description": "",
    "displayName": "@rtdui/core/ColorInput",
    "props": {
      "closeOnColorSwatchClick": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the dropdown should be closed when one of the color swatches is clicked",
        "name": "closeOnColorSwatchClick",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "disallowInput": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If input is not allowed, the user can only pick value with color picker and swatches",
        "name": "disallowInput",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "fixOnBlur": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input value should be reset to the last known valid value when the input loses focusable",
        "name": "fixOnBlur",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "format": {
        "defaultValue": {
          "value": "hex"
        },
        "description": "Color format",
        "name": "format",
        "required": false,
        "type": {
          "name": "ColorFormat | undefined",
          "raw": "ColorFormat | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"color\""
            },
            {
              "value": "\"hex\""
            },
            {
              "value": "\"rgb\""
            },
            {
              "value": "\"hsl\""
            },
            {
              "value": "\"hwb\""
            },
            {
              "value": "\"lab\""
            },
            {
              "value": "\"lch\""
            },
            {
              "value": "\"oklab\""
            },
            {
              "value": "\"oklch\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "Called when the user stops dragging one of the sliders or changes the value with arrow keys",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "({ left?: string | undefined; input?: string | undefined; right?: string | undefined; } & { eyeDropper?: string | undefined; }) | undefined"
        }
      },
      "swatches": {
        "defaultValue": null,
        "description": "An array of colors in one of the supported formats. Used to render swatches list below the color picker.",
        "name": "swatches",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "swatchesPerRow": {
        "defaultValue": {
          "value": "7"
        },
        "description": "Number of swatches per row",
        "name": "swatchesPerRow",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withEyeDropper": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether eye dropper button should be displayed in the right section",
        "name": "withEyeDropper",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withPicker": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the color picker should be displayed",
        "name": "withPicker",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withPreview": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the preview color swatch should be displayed in the left section of the input",
        "name": "withPreview",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "ColorPicker": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorPicker/ColorPicker.tsx",
    "description": "",
    "displayName": "@rtdui/core/ColorPicker",
    "props": {
      "alphaLabel": {
        "defaultValue": null,
        "description": "Alpha slider <code>aria-label</code> prop",
        "name": "alphaLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "focusable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether interactive elements (sliders thumbs and swatches) should be focusable",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "format": {
        "defaultValue": {
          "value": "hex"
        },
        "description": "Color format",
        "name": "format",
        "required": false,
        "type": {
          "name": "ColorFormat | undefined",
          "raw": "ColorFormat | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"color\""
            },
            {
              "value": "\"hex\""
            },
            {
              "value": "\"rgb\""
            },
            {
              "value": "\"hsl\""
            },
            {
              "value": "\"hwb\""
            },
            {
              "value": "\"lab\""
            },
            {
              "value": "\"lch\""
            },
            {
              "value": "\"oklab\""
            },
            {
              "value": "\"oklch\""
            }
          ]
        }
      },
      "fullWidth": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the component should take 100% width of its container",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hueLabel": {
        "defaultValue": null,
        "description": "Hue slider <code>aria-label</code> prop",
        "name": "hueLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "Called when the user stops dragging one of the sliders or changes the value with arrow keys",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onColorSwatchClick": {
        "defaultValue": null,
        "description": "Called when one of the color swatches is clicked",
        "name": "onColorSwatchClick",
        "required": false,
        "type": {
          "name": "((color: string) => void) | undefined"
        }
      },
      "saturationLabel": {
        "defaultValue": null,
        "description": "Saturation slider <code>aria-label</code> prop",
        "name": "saturationLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Controls size of hue, alpha and saturation sliders",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "swatches": {
        "defaultValue": null,
        "description": "An array of colors in one of the supported formats. Used to render swatches list below the color picker.",
        "name": "swatches",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "swatchesPerRow": {
        "defaultValue": {
          "value": "7"
        },
        "description": "Number of swatches per row",
        "name": "swatchesPerRow",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withPicker": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the color picker should be displayed",
        "name": "withPicker",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "ColorSwatch": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorSwatch/ColorSwatch.tsx",
    "description": "polymorphic",
    "displayName": "ColorSwatch",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content rendered inside the swatch",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color to display, Key of theme colors or any valid CSS color values",
        "name": "color",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"circle\""
        },
        "description": "Key of <code>radius</code> or any valid CSS value to set <code>border-radius</code>",
        "name": "radius",
        "required": false,
        "type": {
          "name": "\"circle\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"circle\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls <code>width</code> and <code>height</code> of the swatch, any valid CSS value",
        "name": "size",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "withShadow": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the swatch should have inner <code>box-shadow</code>",
        "name": "withShadow",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "Combobox": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/Combobox.tsx",
    "description": "",
    "displayName": "@rtdui/core/Combobox",
    "props": {
      "arrowOffset": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Arrow offset in px",
        "name": "arrowOffset",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "arrowPosition": {
        "defaultValue": {
          "value": "\"side\""
        },
        "description": "Arrow position",
        "name": "arrowPosition",
        "required": false,
        "type": {
          "name": "ArrowPosition | undefined",
          "raw": "ArrowPosition | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"side\""
            }
          ]
        }
      },
      "arrowRadius": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Arrow <code>border-radius</code> in px",
        "name": "arrowRadius",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "arrowSize": {
        "defaultValue": {
          "value": "7"
        },
        "description": "Arrow size in px",
        "name": "arrowSize",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Combobox content",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "clickOutsideEvents": {
        "defaultValue": {
          "value": "[\"mousedown\", \"touchstart\"]"
        },
        "description": "Events that trigger outside clicks",
        "name": "clickOutsideEvents",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "closeOnClickOutside": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed on outside clicks",
        "name": "closeOnClickOutside",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed when <code>Escape</code> key is pressed",
        "name": "closeOnEscape",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "defaultOpened": {
        "defaultValue": null,
        "description": "Initial opened state for uncontrolled component",
        "name": "defaultOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "If set, popover dropdown will not be rendered",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownColor": {
        "defaultValue": null,
        "description": "background color of dropdown and arrow, default 'bg-base-100'",
        "name": "dropdownColor",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "dropdownPadding": {
        "defaultValue": {
          "value": "4"
        },
        "description": "Controls <code>padding</code> of the dropdown",
        "name": "dropdownPadding",
        "required": false,
        "type": {
          "name": "Padding<string | number> | undefined"
        }
      },
      "floatingStrategy": {
        "defaultValue": {
          "value": "\"absolute\""
        },
        "description": "Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)",
        "name": "floatingStrategy",
        "required": false,
        "type": {
          "name": "FloatingStrategy | undefined",
          "raw": "FloatingStrategy | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"absolute\""
            },
            {
              "value": "\"fixed\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id base to create accessibility connections",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "keepMounted": {
        "defaultValue": null,
        "description": "If set dropdown will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead",
        "name": "keepMounted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "middlewares": {
        "defaultValue": {
          "value": "{ flip: true, shift: true, inline: false }"
        },
        "description": "Floating ui middlewares to configure position handling",
        "name": "middlewares",
        "required": false,
        "type": {
          "name": "PopoverMiddlewares | undefined"
        }
      },
      "offset": {
        "defaultValue": {
          "value": "8"
        },
        "description": "Offset of the dropdown element",
        "name": "offset",
        "required": false,
        "type": {
          "name": "number | FloatingAxesOffsets | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called with current state when dropdown opens or closes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((opened: boolean) => void) | undefined"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onOptionSubmit": {
        "defaultValue": null,
        "description": "Called when item is selected with <code>Enter</code> key or by clicking it",
        "name": "onOptionSubmit",
        "required": false,
        "type": {
          "name": "((value: string, optionProps: ComboboxOptionProps) => void) | undefined"
        }
      },
      "onPositionChange": {
        "defaultValue": null,
        "description": "Called when dropdown position changes",
        "name": "onPositionChange",
        "required": false,
        "type": {
          "name": "((position: FloatingPosition) => void) | undefined"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Controlled dropdown opened state",
        "name": "opened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "optionPadding": {
        "defaultValue": {
          "value": "sm"
        },
        "description": "Controls <code>padding</code> of the Option",
        "name": "optionPadding",
        "required": false,
        "type": {
          "name": "ThemeBaseSize | undefined",
          "raw": "ThemeBaseSize | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "portalProps": {
        "defaultValue": null,
        "description": "Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true",
        "name": "portalProps",
        "required": false,
        "type": {
          "name": "Omit<PortalProps, \"children\"> | undefined"
        }
      },
      "position": {
        "defaultValue": {
          "value": "\"bottom\""
        },
        "description": "Dropdown position relative to the target element",
        "name": "position",
        "required": false,
        "type": {
          "name": "FloatingPosition | undefined",
          "raw": "FloatingPosition | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"top\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"left-end\""
            },
            {
              "value": "\"left-start\""
            },
            {
              "value": "\"right-end\""
            },
            {
              "value": "\"right-start\""
            },
            {
              "value": "\"top-end\""
            },
            {
              "value": "\"top-start\""
            },
            {
              "value": "\"bottom-end\""
            },
            {
              "value": "\"bottom-start\""
            }
          ]
        }
      },
      "positionDependencies": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "<code>useEffect</code> dependencies to force update dropdown position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[] | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set border-radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Determines whether Combobox value can be changed",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "resetSelectionOnOptionHover": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether selection should be reset when option is hovered",
        "name": "resetSelectionOnOptionHover",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "returnFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether focus should be automatically returned to control when dropdown closes",
        "name": "returnFocus",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "shadow": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "ThemeShadow | undefined",
          "raw": "ThemeShadow | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls items <code>font-size</code> and <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "store": {
        "defaultValue": null,
        "description": "Combobox store, can be used to control combobox state",
        "name": "store",
        "required": false,
        "type": {
          "name": "ComboboxStore | undefined"
        }
      },
      "transitionProps": {
        "defaultValue": {
          "value": "{duration: 150, transition: 'fade'}"
        },
        "description": "Props passed down to the <code>Transition</code> component that used to animate dropdown presence, use to configure duration and animation type",
        "name": "transitionProps",
        "required": false,
        "type": {
          "name": "Omit<TransitionProps, \"children\"> | undefined"
        }
      },
      "trapFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether focus should be trapped within dropdown",
        "name": "trapFocus",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "width": {
        "defaultValue": {
          "value": "\"max-content\""
        },
        "description": "Dropdown width, or <code>'target'</code> to make dropdown width the same as target element",
        "name": "width",
        "required": false,
        "type": {
          "name": "PopoverWidth"
        }
      },
      "withArrow": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether component should have an arrow",
        "name": "withArrow",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withRoles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown and target elements should have accessible roles",
        "name": "withRoles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withinPortal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be rendered within the <code>Portal</code>",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "50"
        },
        "description": "Dropdown <code>z-index</code>",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "Combobox.HiddenInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/Combobox.tsx",
    "description": "",
    "displayName": "Combobox.HiddenInput",
    "props": {
      "value": {
        "defaultValue": null,
        "description": "Input value",
        "name": "value",
        "required": true,
        "type": {
          "name": "string | string[] | null"
        }
      },
      "valuesDivider": {
        "defaultValue": null,
        "description": "Divider character that is used to transform array values to string, <code>','</code> by default",
        "name": "valuesDivider",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "CopyButton": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/CopyButton/CopyButton.tsx",
    "description": "",
    "displayName": "CopyButton",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Children callback, provides current status and copy function as an argument",
        "name": "children",
        "required": true,
        "type": {
          "name": "(payload: { copied: boolean; copy: () => void; }) => ReactNode"
        }
      },
      "timeout": {
        "defaultValue": {
          "value": "1000"
        },
        "description": "Copied status timeout in ms",
        "name": "timeout",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value that will be copied to the clipboard when the button is clicked",
        "name": "value",
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "@rtdui/Countdown": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Countdown/Countdown.tsx",
    "description": "",
    "displayName": "@rtdui/Countdown",
    "props": {
      "endDate": {
        "defaultValue": null,
        "description": "",
        "name": "endDate",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "labelPosition": {
        "defaultValue": null,
        "description": "",
        "name": "labelPosition",
        "required": false,
        "type": {
          "name": "\"right\" | \"bottom\" | undefined",
          "raw": "\"right\" | \"bottom\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"bottom\""
            }
          ]
        }
      },
      "labels": {
        "defaultValue": {
          "value": "'{years:\"years\", months:\"months\", days:\"days\", hours:\"hours\", minutes:\"minutes\", seconds:\"seconds\"}'"
        },
        "description": "显示文本, 可以本地化",
        "name": "labels",
        "required": false,
        "type": {
          "name": "{ years: string; months: string; days: string; hours: string; minutes: string; seconds: string; } | undefined"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"box\" | \"labelInline\" | \"labelUnder\" | undefined",
          "raw": "\"box\" | \"labelInline\" | \"labelUnder\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"box\""
            },
            {
              "value": "\"labelInline\""
            },
            {
              "value": "\"labelUnder\""
            }
          ]
        }
      }
    }
  },
  "@rtdui/DebouncedInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/DebouncedInput/DebouncedInput.tsx",
    "description": "",
    "displayName": "@rtdui/DebouncedInput",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": true,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "wait": {
        "defaultValue": {
          "value": "500"
        },
        "description": "延迟的毫秒数",
        "name": "wait",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/Divider": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Divider/Divider.tsx",
    "description": "ref属性会转发至内部的根div元素",
    "displayName": "@rtdui/Divider",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "direction": {
        "defaultValue": {
          "value": "\"vertical\""
        },
        "description": "divider direction",
        "name": "direction",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\" | undefined",
          "raw": "\"horizontal\" | \"vertical\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"horizontal\""
            },
            {
              "value": "\"vertical\""
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelPostion": {
        "defaultValue": {
          "value": "center"
        },
        "description": "label position",
        "name": "labelPostion",
        "required": false,
        "type": {
          "name": "\"center\" | \"end\" | \"start\" | undefined",
          "raw": "\"center\" | \"end\" | \"start\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      }
    }
  },
  "Drawer": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Drawer/Drawer.tsx",
    "description": "drawer",
    "displayName": "Drawer",
    "props": {
      "anchor": {
        "defaultValue": null,
        "description": "",
        "name": "anchor",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | undefined",
          "raw": "\"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "clickOutsideClose": {
        "defaultValue": {
          "value": "true"
        },
        "description": "click drawer outside close drawer",
        "name": "clickOutsideClose",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "defaultOpen": {
        "defaultValue": null,
        "description": "",
        "name": "defaultOpen",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((open: boolean) => void) | undefined"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ side?: string | undefined; overlay?: string | undefined; } | undefined"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "",
        "name": "target",
        "required": false,
        "type": {
          "name": "string | HTMLElement | undefined"
        }
      }
    }
  },
  "FloatingIndicator": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/FloatingIndicator/FloatingIndicator.tsx",
    "description": "多态组件, ref会转发给实际的组件",
    "displayName": "FloatingIndicator",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "displayAfterTransitionEnd": {
        "defaultValue": null,
        "description": "Determines whether indicator should be displayed after transition ends, should be set if used inside a container that has <code>transform: scale(n)</code> styles",
        "name": "displayAfterTransitionEnd",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "parent": {
        "defaultValue": null,
        "description": "Parent element with relative position based on which indicator position should be calculated",
        "name": "parent",
        "required": true,
        "type": {
          "name": "HTMLElement | null | undefined"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Target element over which indicator should be displayed",
        "name": "target",
        "required": true,
        "type": {
          "name": "HTMLElement | null | undefined"
        }
      },
      "transitionDuration": {
        "defaultValue": {
          "value": "150"
        },
        "description": "Transition duration in ms",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "FloatingSelect": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/FloatingSelect/FloatingSelect.tsx",
    "description": "",
    "displayName": "@rtdui/core/FloatingSelect",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Key of <code>theme.colors</code> or any valid CSS color, changes color of indicator, by default color is based on current color scheme",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data based on which controls are rendered",
        "name": "data",
        "required": true,
        "type": {
          "name": "(string | FloatingSelectItem)[]"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Determines whether the component is disabled",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Determines whether the component should take 100% width of its parent, <code>false</code> by default",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the radio group, by default random name is generated",
        "name": "name",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "orientation": {
        "defaultValue": {
          "value": "\"horizontal\""
        },
        "description": "Determines in which orientation component id displayed",
        "name": "orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\" | undefined",
          "raw": "\"horizontal\" | \"vertical\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"horizontal\""
            },
            {
              "value": "\"vertical\""
            }
          ]
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "\"circle\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"circle\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Determines whether the value can be changed",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls <code>font-size</code>, <code>padding</code> and <code>height</code> properties",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ indicator?: string | undefined; } | undefined"
        }
      },
      "transitionDuration": {
        "defaultValue": {
          "value": "200"
        },
        "description": "Indicator <code>transition-duration</code> in ms, set <code>0</code> to turn off transitions",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withItemsSeparator": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether there should be borders between items",
        "name": "withItemsSeparator",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "FocusTrap": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/FocusTrap/FocusTrap.tsx",
    "description": "焦点围栏组件\n\n焦点捕获逻辑\n如果active属性为true,焦点会被捕获到孩子元素中\n当FocusTrap组件被挂载或当active属性由false变为true时,第一个带有data-autofocus特性的元素被聚焦\n如果没有data-autofocus特性的元素,则第一个支持键盘导航的元素被聚焦\n如果目标元素没有可聚焦元素或不支持ref,那么焦点围栏将不起作用\n当FocusTrap孩子元素之外的元素被聚焦时,焦点围栏停止工作",
    "displayName": "@rtdui/core/FocusTrap",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether focus should be trapped within child element",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Element at which focus should be trapped, should support ref prop",
        "name": "children",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "refProp": {
        "defaultValue": null,
        "description": "Prop that should be used to access component ref",
        "name": "refProp",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "FocusTrap.InitialFocus": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/FocusTrap/FocusTrap.tsx",
    "description": "这是一个特殊的组件,只渲染sr-only元素. 当对话框打开时不想让任何元素获取焦点, 可将它作为第一个孩子.",
    "displayName": "FocusTrap.InitialFocus",
    "props": {}
  },
  "@rtdui/Grid": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Grid/Grid.tsx",
    "description": "",
    "displayName": "@rtdui/Grid",
    "props": {
      "align": {
        "defaultValue": {
          "value": "stretch"
        },
        "description": "设置 <code>align-items</code> css规则",
        "name": "align",
        "required": false,
        "type": {
          "name": "AlignItems | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "孩子必须是Col组件",
        "name": "children",
        "required": false,
        "type": {
          "name": "ReactElement<GridColProps, ForwardRefExoticComponent<GridColProps & RefAttributes<HTMLDivElement>>>[] | undefined"
        }
      },
      "columns": {
        "defaultValue": {
          "value": "12"
        },
        "description": "总共列数",
        "name": "columns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "grow": {
        "defaultValue": {
          "value": "false"
        },
        "description": "最后一行中的列是否填充所有剩余空间.",
        "name": "grow",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "gutter": {
        "defaultValue": {
          "value": "4px"
        },
        "description": "设置 <code>gap</code> css规则",
        "name": "gutter",
        "required": false,
        "type": {
          "name": "ResponsiveProp<string> | undefined"
        }
      },
      "justify": {
        "defaultValue": {
          "value": "flex-start"
        },
        "description": "设置 <code>justify-content</code> css规则",
        "name": "justify",
        "required": false,
        "type": {
          "name": "JustifyContent | undefined"
        }
      }
    }
  },
  "@rtdui/Indicator": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Indicator/Indicator.tsx",
    "description": "",
    "displayName": "@rtdui/Indicator",
    "props": {
      "animation": {
        "defaultValue": null,
        "description": "",
        "name": "animation",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "badgeColor": {
        "defaultValue": {
          "value": "secondary"
        },
        "description": "",
        "name": "badgeColor",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "badgeText": {
        "defaultValue": null,
        "description": "",
        "name": "badgeText",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "InlineStyles": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/InlineStyles/InlineStyles.tsx",
    "description": "",
    "displayName": "InlineStyles",
    "props": {
      "media": {
        "defaultValue": null,
        "description": "",
        "name": "media",
        "required": false,
        "type": {
          "name": "InlineStylesMediaQuery[] | undefined"
        }
      },
      "selector": {
        "defaultValue": null,
        "description": "",
        "name": "selector",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "styles": {
        "defaultValue": null,
        "description": "",
        "name": "styles",
        "required": false,
        "type": {
          "name": "CSSProperties | undefined"
        }
      }
    }
  },
  "Input_": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Input/Input.tsx",
    "description": "多态组件",
    "displayName": "Input_",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "Input": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Input/Input.tsx",
    "description": "",
    "displayName": "Input",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "InputBase": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/InputBase/InputBase.tsx",
    "description": "多态组件",
    "displayName": "@rtdui/core/InputBase",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/JoinGroup": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/JoinGroup/JoinGroup.tsx",
    "description": "",
    "displayName": "@rtdui/JoinGroup",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "ReactElements",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "@rtdui/JsonInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/JsonInput/JsonInput.tsx",
    "description": "`JsonInput`继承了`TextArea`组件的属性",
    "displayName": "@rtdui/JsonInput",
    "props": {
      "autosize": {
        "defaultValue": {
          "value": "faslse"
        },
        "description": "Determines whether the textarea height should grow with its content",
        "name": "autosize",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "formatOnBlur": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the value should be formatted on blur",
        "name": "formatOnBlur",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "maxRows": {
        "defaultValue": null,
        "description": "Maximum rows for autosize textarea to grow, ignored if <code>autosize</code> prop is not set",
        "name": "maxRows",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "minRows": {
        "defaultValue": null,
        "description": "Minimum rows of autosize textarea, ignored if <code>autosize</code> prop is not set",
        "name": "minRows",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "resize": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Controls <code>resize</code> CSS property",
        "name": "resize",
        "required": false,
        "type": {
          "name": "Resize | undefined",
          "raw": "Resize | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"inline\""
            },
            {
              "value": "\"both\""
            },
            {
              "value": "\"horizontal\""
            },
            {
              "value": "\"vertical\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"block\""
            }
          ]
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/Kbd": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Kbd/Kbd.tsx",
    "description": "",
    "displayName": "@rtdui/Kbd",
    "props": {
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      }
    }
  },
  "@rtdui/Link": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Link/Link.tsx",
    "description": "多态组件, ref会转发给实际的组件",
    "displayName": "@rtdui/Link",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "尺寸大小",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      }
    }
  },
  "@rtdui/Loading": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Loading/Loading.tsx",
    "description": "",
    "displayName": "@rtdui/Loading",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "spinner"
        },
        "description": "loading variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"spinner\" | \"dots\" | \"ring\" | \"ball\" | \"bars\" | \"infinity\" | undefined",
          "raw": "\"spinner\" | \"dots\" | \"ring\" | \"ball\" | \"bars\" | \"infinity\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"spinner\""
            },
            {
              "value": "\"dots\""
            },
            {
              "value": "\"ring\""
            },
            {
              "value": "\"ball\""
            },
            {
              "value": "\"bars\""
            },
            {
              "value": "\"infinity\""
            }
          ]
        }
      }
    }
  },
  "Modal": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Modal/Modal.tsx",
    "description": "",
    "displayName": "@rtdui/core/Modal",
    "props": {
      "centered": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the modal should be centered vertically",
        "name": "centered",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Modal content",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "closeButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to the close button",
        "name": "closeButtonProps",
        "required": false,
        "type": {
          "name": "ModalCloseButtonProps | undefined"
        }
      },
      "closeOnClickOutside": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the modal/drawer should be closed when user clicks on the overlay",
        "name": "closeOnClickOutside",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>onClose</code> should be called when user presses the escape key",
        "name": "closeOnEscape",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "fullScreen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the modal should be full screen",
        "name": "fullScreen",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id used to connect modal/drawer with body and title",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "keepMounted": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If set modal/drawer will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead",
        "name": "keepMounted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "lockScroll": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether scroll should be locked when <code>opened={true}</code>",
        "name": "lockScroll",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when modal/drawer is closed",
        "name": "onClose",
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Determines whether modal/drawer is opened",
        "name": "opened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Overlay</code> component, use to configure opacity, <code>background-color</code>, styles and other properties",
        "name": "overlayProps",
        "required": false,
        "type": {
          "name": "ModalOverlayProps | undefined"
        }
      },
      "padding": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding",
        "name": "padding",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "portalProps": {
        "defaultValue": null,
        "description": "Props passed down to the Portal component when <code>withinPortal</code> is set",
        "name": "portalProps",
        "required": false,
        "type": {
          "name": "Omit<PortalProps, \"children\"> | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "removeScrollProps": {
        "defaultValue": null,
        "description": "Props passed down to react-remove-scroll, can be used to customize scroll lock behavior",
        "name": "removeScrollProps",
        "required": false,
        "type": {
          "name": "RemoveScrollProps | undefined"
        }
      },
      "returnFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether focus should be returned to the last active element when <code>onClose</code> is called",
        "name": "returnFocus",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "shadow": {
        "defaultValue": {
          "value": "\"xl\""
        },
        "description": "Key of <code>theme.shadows</code> or any valid CSS box-shadow value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "ThemeShadow | undefined",
          "raw": "ThemeShadow | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Controls width of the content area",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Modal title",
        "name": "title",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "transitionProps": {
        "defaultValue": {
          "value": "{ duration: 200, transition: 'fade' }"
        },
        "description": "Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type",
        "name": "transitionProps",
        "required": false,
        "type": {
          "name": "Omit<TransitionProps, \"children\"> | undefined"
        }
      },
      "trapFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether focus should be trapped",
        "name": "trapFocus",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCloseButton": {
        "defaultValue": null,
        "description": "Determines whether the close button should be rendered, <code>true</code> by default",
        "name": "withCloseButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withOverlay": {
        "defaultValue": null,
        "description": "Determines whether the overlay should be rendered, <code>true</code> by default",
        "name": "withOverlay",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withinPortal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the component should be rendered inside <code>Portal</code>",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yOffset": {
        "defaultValue": null,
        "description": "",
        "name": "yOffset",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "200"
        },
        "description": "<code>z-index</code> CSS property of the root element",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "ModalBody": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Modal/ModalBody.tsx",
    "description": "",
    "displayName": "@rtdui/core/ModalBody",
    "props": {}
  },
  "ModalCloseButton": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Modal/ModalCloseButton.tsx",
    "description": "",
    "displayName": "@rtdui/core/ModalCloseButton",
    "props": {}
  },
  "ModalContent": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Modal/ModalContent.tsx",
    "description": "",
    "displayName": "@rtdui/core/ModalContent",
    "props": {
      "fullScreen": {
        "defaultValue": null,
        "description": "",
        "name": "fullScreen",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "innerProps": {
        "defaultValue": null,
        "description": "",
        "name": "innerProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> | undefined"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set border-radius, numbers are converted to rem, <code>theme.defaultRadius</code> by default",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "shadow": {
        "defaultValue": null,
        "description": "Key of <code>theme.shadows</code> or any valid CSS value to set <code>box-shadow</code>, <code>none</code> by default",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "ThemeShadow | undefined",
          "raw": "ThemeShadow | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "transitionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Transition</code> component",
        "name": "transitionProps",
        "required": false,
        "type": {
          "name": "TransitionProps | undefined"
        }
      }
    }
  },
  "ModalHeader": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Modal/ModalHeader.tsx",
    "description": "",
    "displayName": "@rtdui/core/ModalHeader",
    "props": {}
  },
  "ModalOverlay": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Modal/ModalOverlay.tsx",
    "description": "",
    "displayName": "@rtdui/core/ModalOverlay",
    "props": {
      "backgroundOpacity": {
        "defaultValue": {
          "value": "0.6"
        },
        "description": "Controls overlay <code>background-color</code> opacity 0–1, disregarded when <code>gradient</code> prop is set",
        "name": "backgroundOpacity",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "blur": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Overlay background blur, <code>0</code> by default",
        "name": "blur",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "center": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether content inside overlay should be vertically and horizontally centered",
        "name": "center",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content inside overlay",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "color": {
        "defaultValue": {
          "value": "\"#000\""
        },
        "description": "Overlay <code>background-color</code>",
        "name": "color",
        "required": false,
        "type": {
          "name": "BackgroundColor | undefined"
        }
      },
      "fixed": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether overlay should have fixed position instead of absolute",
        "name": "fixed",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Changes overlay to gradient. If set, <code>color</code> prop is ignored",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"0\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set border-radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "transitionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Transition</code> component",
        "name": "transitionProps",
        "required": false,
        "type": {
          "name": "TransitionProps | undefined"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "50"
        },
        "description": "Overlay z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "ModalRoot": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Modal/ModalRoot.tsx",
    "description": "",
    "displayName": "@rtdui/core/ModalRoot",
    "props": {
      "centered": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the modal should be centered vertically",
        "name": "centered",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Modal/drawer content",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "closeOnClickOutside": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the modal/drawer should be closed when user clicks on the overlay",
        "name": "closeOnClickOutside",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>onClose</code> should be called when user presses the escape key",
        "name": "closeOnEscape",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "fullScreen": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the modal should be full screen",
        "name": "fullScreen",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id used to connect modal/drawer with body and title",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "keepMounted": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If set modal/drawer will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead",
        "name": "keepMounted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "lockScroll": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether scroll should be locked when <code>opened={true}</code>",
        "name": "lockScroll",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when modal/drawer is closed",
        "name": "onClose",
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Determines whether modal/drawer is opened",
        "name": "opened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "padding": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.spacing</code> or any valid CSS value to set content, header and footer padding",
        "name": "padding",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "portalProps": {
        "defaultValue": null,
        "description": "Props passed down to the Portal component when <code>withinPortal</code> is set",
        "name": "portalProps",
        "required": false,
        "type": {
          "name": "Omit<PortalProps, \"children\"> | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "removeScrollProps": {
        "defaultValue": null,
        "description": "Props passed down to react-remove-scroll, can be used to customize scroll lock behavior",
        "name": "removeScrollProps",
        "required": false,
        "type": {
          "name": "RemoveScrollProps | undefined"
        }
      },
      "returnFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether focus should be returned to the last active element when <code>onClose</code> is called",
        "name": "returnFocus",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "shadow": {
        "defaultValue": {
          "value": "\"xl\""
        },
        "description": "Key of <code>theme.shadows</code> or any valid CSS box-shadow value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "ThemeShadow | undefined",
          "raw": "ThemeShadow | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Controls width of the content area",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "transitionProps": {
        "defaultValue": {
          "value": "{ duration: 200, transition: 'fade' }"
        },
        "description": "Props added to the <code>Transition</code> component that used to animate overlay and body, use to configure duration and animation type",
        "name": "transitionProps",
        "required": false,
        "type": {
          "name": "Omit<TransitionProps, \"children\"> | undefined"
        }
      },
      "trapFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether focus should be trapped",
        "name": "trapFocus",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withinPortal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the component should be rendered inside <code>Portal</code>",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yOffset": {
        "defaultValue": null,
        "description": "",
        "name": "yOffset",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "200"
        },
        "description": "<code>z-index</code> CSS property of the root element",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "ModalTitle": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Modal/ModalTitle.tsx",
    "description": "",
    "displayName": "@rtdui/core/ModalTitle",
    "props": {}
  },
  "MultiSelect": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/MultiSelect/MultiSelect.tsx",
    "description": "",
    "displayName": "@rtdui/core/MultiSelect",
    "props": {
      "autoComplete": {
        "defaultValue": null,
        "description": "",
        "name": "autoComplete",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "checkIconPosition": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Position of the check icon relative to the option label",
        "name": "checkIconPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | undefined",
          "raw": "\"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to the clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "ComboboxClearButtonProps | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the clear button should be displayed in the right section when the component has value",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "comboboxProps": {
        "defaultValue": null,
        "description": "Props passed down to <code>Combobox</code> component",
        "name": "comboboxProps",
        "required": false,
        "type": {
          "name": "ComboboxProps | undefined"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data used to generate options",
        "name": "data",
        "required": false,
        "type": {
          "name": "ComboboxData | undefined"
        }
      },
      "defaultDropdownOpened": {
        "defaultValue": null,
        "description": "Uncontrolled dropdown initial opened state",
        "name": "defaultDropdownOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "defaultSearchValue": {
        "defaultValue": null,
        "description": "Default search value",
        "name": "defaultSearchValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownOpened": {
        "defaultValue": null,
        "description": "Controlled dropdown opened state",
        "name": "dropdownOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function based on which items are filtered and sorted",
        "name": "filter",
        "required": false,
        "type": {
          "name": "OptionsFilter | undefined"
        }
      },
      "hiddenInputProps": {
        "defaultValue": null,
        "description": "Props passed down to the hidden input",
        "name": "hiddenInputProps",
        "required": false,
        "type": {
          "name": "Omit<Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \"ref\">, \"value\"> | undefined"
        }
      },
      "hiddenInputValuesDivider": {
        "defaultValue": {
          "value": "\",\""
        },
        "description": "Divider used to separate values in the hidden input <code>value</code> attribute",
        "name": "hiddenInputValuesDivider",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "hidePickedOptions": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether picked options should be removed from the options list",
        "name": "hidePickedOptions",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Maximum number of options displayed at a time, <code>Infinity</code> by default",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "maxDropdownHeight": {
        "defaultValue": null,
        "description": "<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default",
        "name": "maxDropdownHeight",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "maxValues": {
        "defaultValue": {
          "value": "Infinity"
        },
        "description": "Maximum number of values",
        "name": "maxValues",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nothingFoundMessage": {
        "defaultValue": null,
        "description": "Message displayed when no option matched current search query, only applicable when <code>searchable</code> prop is set",
        "name": "nothingFoundMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called whe value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string[]) => void) | undefined"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "Called when the clear button is clicked",
        "name": "onClear",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onOptionSubmit": {
        "defaultValue": null,
        "description": "Called when option is submitted from dropdown with mouse click or <code>Enter</code> key",
        "name": "onOptionSubmit",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onRemove": {
        "defaultValue": null,
        "description": "Called with <code>value</code> of the removed item",
        "name": "onRemove",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onSearchChange": {
        "defaultValue": null,
        "description": "Called when search changes",
        "name": "onSearchChange",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderOption": {
        "defaultValue": null,
        "description": "A function to render content of the option, replaces the default content of the option",
        "name": "renderOption",
        "required": false,
        "type": {
          "name": "((item: ComboboxLikeRenderOptionInput<ComboboxItem>) => ReactNode) | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "searchValue": {
        "defaultValue": null,
        "description": "Controlled search value",
        "name": "searchValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "searchable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the select should be searchable",
        "name": "searchable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "selectFirstOptionOnChange": {
        "defaultValue": null,
        "description": "Determines whether the first option should be selected when value changes, <code>false</code> by default",
        "name": "selectFirstOptionOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCheckIcon": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether check icon should be displayed near the selected option label",
        "name": "withCheckIcon",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withScrollArea": {
        "defaultValue": null,
        "description": "Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default",
        "name": "withScrollArea",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/NativeSelect": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/NativeSelect/NativeSelect.tsx",
    "description": "",
    "displayName": "@rtdui/NativeSelect",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "required": false,
        "type": {
          "name": "ComboboxData | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "NativeSelectOption": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/NativeSelect/NativeSelectOption.tsx",
    "description": "",
    "displayName": "@rtdui/core/NativeSelectOption",
    "props": {
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "required": true,
        "type": {
          "name": "ComboboxParsedItem"
        }
      }
    }
  },
  "@rtdui/NumberInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/NumberInput/NumberInput.tsx",
    "description": "NumberInput继承了TextInput的所有属性",
    "displayName": "@rtdui/NumberInput",
    "props": {
      "allowDecimal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether decimal values are allowed",
        "name": "allowDecimal",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "allowNegative": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether negative values are allowed",
        "name": "allowNegative",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "clampBehavior": {
        "defaultValue": {
          "value": "\"blur\""
        },
        "description": "Controls how value is clamped\n<code>strict</code> – user is not allowed to enter values that are not in <code>[min, max]</code> range,\n<code>blur</code> – user is allowed to enter any values, but the value is clamped when the input loses focus (default behavior),\n<code>none</code> – lifts all restrictions, <code>[min, max]</code> range is applied only for controls and up/down keys",
        "name": "clampBehavior",
        "required": false,
        "type": {
          "name": "\"none\" | \"blur\" | \"strict\" | undefined",
          "raw": "\"none\" | \"blur\" | \"strict\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"blur\""
            },
            {
              "value": "\"strict\""
            }
          ]
        }
      },
      "decimalScale": {
        "defaultValue": null,
        "description": "Limits the number of digits that can be entered after the decimal point",
        "name": "decimalScale",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "isAllowed": {
        "defaultValue": null,
        "description": "A function to validate the input value. If this function returns <code>false</code>, the <code>onChange</code> will not be called and the input value will not change.",
        "name": "isAllowed",
        "required": false,
        "type": {
          "name": "((values: NumberFormatValues) => boolean) | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "Maximum possible value",
        "name": "max",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "Minimum possible value",
        "name": "min",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string | number) => void) | undefined"
        }
      },
      "onValueChange": {
        "defaultValue": null,
        "description": "Called when value changes with <code>react-number-format</code> payload",
        "name": "onValueChange",
        "required": false,
        "type": {
          "name": "OnValueChange | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "prefix": {
        "defaultValue": null,
        "description": "Prefix added before the input value",
        "name": "prefix",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "step": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Number by which value will be incremented/decremented with up/down controls and keyboard arrows",
        "name": "step",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "suffix": {
        "defaultValue": null,
        "description": "Suffix added after the input value",
        "name": "suffix",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "thousandsGroupStyle": {
        "defaultValue": null,
        "description": "Defines the thousand grouping style.",
        "name": "thousandsGroupStyle",
        "required": false,
        "type": {
          "name": "\"thousand\" | \"lakh\" | \"wan\" | undefined",
          "raw": "\"thousand\" | \"lakh\" | \"wan\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"thousand\""
            },
            {
              "value": "\"lakh\""
            },
            {
              "value": "\"wan\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "Overlay": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Overlay/Overlay.tsx",
    "description": "",
    "displayName": "@rtdui/core/Overlay",
    "props": {
      "backgroundOpacity": {
        "defaultValue": {
          "value": "0.6"
        },
        "description": "Controls overlay <code>background-color</code> opacity 0–1, disregarded when <code>gradient</code> prop is set",
        "name": "backgroundOpacity",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "blur": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Overlay background blur, <code>0</code> by default",
        "name": "blur",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "center": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether content inside overlay should be vertically and horizontally centered",
        "name": "center",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content inside overlay",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "color": {
        "defaultValue": {
          "value": "\"#000\""
        },
        "description": "Overlay <code>background-color</code>",
        "name": "color",
        "required": false,
        "type": {
          "name": "BackgroundColor | undefined"
        }
      },
      "fixed": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether overlay should have fixed position instead of absolute",
        "name": "fixed",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Changes overlay to gradient. If set, <code>color</code> prop is ignored",
        "name": "gradient",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"0\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set border-radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "50"
        },
        "description": "Overlay z-index",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "Pagination": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Pagination/Pagination.tsx",
    "description": "",
    "displayName": "Pagination",
    "props": {
      "boundaryCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "左右边界的显示数量",
        "name": "boundaryCount",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "count": {
        "defaultValue": null,
        "description": "总页数",
        "name": "count",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "defaultPage": {
        "defaultValue": null,
        "description": "",
        "name": "defaultPage",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((page: number) => void) | undefined"
        }
      },
      "page": {
        "defaultValue": null,
        "description": "",
        "name": "page",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "sharp": {
        "defaultValue": null,
        "description": "矩形或圆形, 用于单字符或图标",
        "name": "sharp",
        "required": false,
        "type": {
          "name": "\"circle\" | \"square\" | undefined",
          "raw": "\"circle\" | \"square\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"square\""
            }
          ]
        }
      },
      "showFirstButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "showFirstButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "showLastButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "showLastButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "showNextButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "showNextButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "showPrevButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "showPrevButton",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "siblingCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "选中项两边的显示数量",
        "name": "siblingCount",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      }
    }
  },
  "Paper": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Paper/Paper.tsx",
    "description": "多态组件, ref会转发给实际的组件",
    "displayName": "@rtdui/core/Paper",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "elevation": {
        "defaultValue": null,
        "description": "",
        "name": "elevation",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "",
        "name": "padding",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "@rtdui/Box": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Polymorphic/Box.tsx",
    "description": "",
    "displayName": "@rtdui/Box",
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      }
    }
  },
  "Popover": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Popover/Popover.tsx",
    "description": "",
    "displayName": "@rtdui/core/Popover",
    "props": {
      "arrowOffset": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Arrow offset in px",
        "name": "arrowOffset",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "arrowPosition": {
        "defaultValue": {
          "value": "\"side\""
        },
        "description": "Arrow position",
        "name": "arrowPosition",
        "required": false,
        "type": {
          "name": "ArrowPosition | undefined",
          "raw": "ArrowPosition | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"side\""
            }
          ]
        }
      },
      "arrowRadius": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Arrow <code>border-radius</code> in px",
        "name": "arrowRadius",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "arrowSize": {
        "defaultValue": {
          "value": "7"
        },
        "description": "Arrow size in px",
        "name": "arrowSize",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "<code>Popover.Target</code> and <code>Popover.Dropdown</code> components",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "clickOutsideEvents": {
        "defaultValue": {
          "value": "[\"mousedown\", \"touchstart\"]"
        },
        "description": "Events that trigger outside clicks",
        "name": "clickOutsideEvents",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "closeOnClickOutside": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed on outside clicks",
        "name": "closeOnClickOutside",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed when <code>Escape</code> key is pressed",
        "name": "closeOnEscape",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "defaultOpened": {
        "defaultValue": null,
        "description": "Initial opened state for uncontrolled component",
        "name": "defaultOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "If set, popover dropdown will not be rendered",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownColor": {
        "defaultValue": null,
        "description": "background color of dropdown and arrow, default 'bg-base-100'",
        "name": "dropdownColor",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "floatingStrategy": {
        "defaultValue": {
          "value": "\"absolute\""
        },
        "description": "Changes floating ui [position strategy](https://floating-ui.com/docs/usefloating#strategy)",
        "name": "floatingStrategy",
        "required": false,
        "type": {
          "name": "FloatingStrategy | undefined",
          "raw": "FloatingStrategy | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"absolute\""
            },
            {
              "value": "\"fixed\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id base to create accessibility connections",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "keepMounted": {
        "defaultValue": null,
        "description": "If set dropdown will not be unmounted from the DOM when it is hidden, <code>display: none</code> styles will be added instead",
        "name": "keepMounted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "middlewares": {
        "defaultValue": {
          "value": "{ flip: true, shift: true, inline: false }"
        },
        "description": "Floating ui middlewares to configure position handling",
        "name": "middlewares",
        "required": false,
        "type": {
          "name": "PopoverMiddlewares | undefined"
        }
      },
      "offset": {
        "defaultValue": {
          "value": "8"
        },
        "description": "Offset of the dropdown element",
        "name": "offset",
        "required": false,
        "type": {
          "name": "number | FloatingAxesOffsets | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called with current state when dropdown opens or closes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((opened: boolean) => void) | undefined"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPositionChange": {
        "defaultValue": null,
        "description": "Called when dropdown position changes",
        "name": "onPositionChange",
        "required": false,
        "type": {
          "name": "((position: FloatingPosition) => void) | undefined"
        }
      },
      "opened": {
        "defaultValue": null,
        "description": "Controlled dropdown opened state",
        "name": "opened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "portalProps": {
        "defaultValue": null,
        "description": "Props to pass down to the <code>Portal</code> when <code>withinPortal</code> is true",
        "name": "portalProps",
        "required": false,
        "type": {
          "name": "Omit<PortalProps, \"children\"> | undefined"
        }
      },
      "position": {
        "defaultValue": {
          "value": "\"bottom\""
        },
        "description": "Dropdown position relative to the target element",
        "name": "position",
        "required": false,
        "type": {
          "name": "FloatingPosition | undefined",
          "raw": "FloatingPosition | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"top\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"left-end\""
            },
            {
              "value": "\"left-start\""
            },
            {
              "value": "\"right-end\""
            },
            {
              "value": "\"right-start\""
            },
            {
              "value": "\"top-end\""
            },
            {
              "value": "\"top-start\""
            },
            {
              "value": "\"bottom-end\""
            },
            {
              "value": "\"bottom-start\""
            }
          ]
        }
      },
      "positionDependencies": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "<code>useEffect</code> dependencies to force update dropdown position",
        "name": "positionDependencies",
        "required": false,
        "type": {
          "name": "any[] | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set border-radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "returnFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether focus should be automatically returned to control when dropdown closes",
        "name": "returnFocus",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "shadow": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.shadows</code> or any other valid CSS <code>box-shadow</code> value",
        "name": "shadow",
        "required": false,
        "type": {
          "name": "ThemeShadow | undefined",
          "raw": "ThemeShadow | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "transitionProps": {
        "defaultValue": {
          "value": "{duration: 150, transition: 'fade'}"
        },
        "description": "Props passed down to the <code>Transition</code> component that used to animate dropdown presence, use to configure duration and animation type",
        "name": "transitionProps",
        "required": false,
        "type": {
          "name": "Omit<TransitionProps, \"children\"> | undefined"
        }
      },
      "trapFocus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether focus should be trapped within dropdown",
        "name": "trapFocus",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "width": {
        "defaultValue": {
          "value": "\"max-content\""
        },
        "description": "Dropdown width, or <code>'target'</code> to make dropdown width the same as target element",
        "name": "width",
        "required": false,
        "type": {
          "name": "PopoverWidth"
        }
      },
      "withArrow": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether component should have an arrow",
        "name": "withArrow",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withRoles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown and target elements should have accessible roles",
        "name": "withRoles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withinPortal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be rendered within the <code>Portal</code>",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "zIndex": {
        "defaultValue": {
          "value": "50"
        },
        "description": "Dropdown <code>z-index</code>",
        "name": "zIndex",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "OptionalPortal": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Portal/OptionalPortal.tsx",
    "description": "根据withinPortal属性决定是否作为portal渲染",
    "displayName": "@rtdui/core/OptionalPortal",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Portal children, for example, modal or popover",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Element inside which portal should be created, by default a new div element is created and appended to the <code>document.body</code>",
        "name": "target",
        "required": false,
        "type": {
          "name": "string | HTMLElement | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withinPortal": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether children should be rendered inside <code><Portal /></code>",
        "name": "withinPortal",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "@rtdui/Portal": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Portal/Portal.tsx",
    "description": "",
    "displayName": "@rtdui/Portal",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Portal children, for example, modal or popover",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Element inside which portal should be created, by default a new div element is created and appended to the <code>document.body</code>",
        "name": "target",
        "required": false,
        "type": {
          "name": "string | HTMLElement | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "@rtdui/Progress": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Progress/Progress.tsx",
    "description": "",
    "displayName": "@rtdui/Progress",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "max": {
        "defaultValue": {
          "value": "100"
        },
        "description": "",
        "name": "max",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "xs"
        },
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "如果未提供, 则会动画进度条表示不确定的状态",
        "name": "value",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      }
    }
  },
  "@rtdui/RadialProgress": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/RadialProgress/RadialProgress.tsx",
    "description": "",
    "displayName": "@rtdui/RadialProgress",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "任意合法的CSS长度单位",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "thickness": {
        "defaultValue": null,
        "description": "任意合法的CSS长度单位",
        "name": "thickness",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "0-100内的任意值",
        "name": "value",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "@rtdui/Radio": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Radio/Radio.tsx",
    "description": "ref属性会转发至内部的input元素\n如果Radio在RadioGroup内,则自身的name,checked,size和color属性值会被忽略, 优先使用RadioGroup上下文提供的值\n自身的onChange事件会保留并优先触发, 以便用户应对特殊情况的特殊处理",
    "displayName": "@rtdui/Radio",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "helperText": {
        "defaultValue": null,
        "description": "",
        "name": "helperText",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ inputWrapper?: string | undefined; input?: string | undefined; label?: string | undefined; helperText?: string | undefined; } | undefined"
        }
      }
    }
  },
  "@rtdui/RadioGroup": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/RadioGroup/RadioGroup.tsx",
    "description": "ref属性会转发至内部的input元素",
    "displayName": "@rtdui/RadioGroup",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "helperText": {
        "defaultValue": null,
        "description": "",
        "name": "helperText",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string | number) => void) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ label?: string | undefined; helperText?: string | undefined; groups?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      }
    }
  },
  "@rtdui/Rating": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Rating/Rating.tsx",
    "description": "星级评分",
    "displayName": "@rtdui/Rating",
    "props": {
      "count": {
        "defaultValue": {
          "value": "5"
        },
        "description": "评级的数量",
        "name": "count",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "half": {
        "defaultValue": {
          "value": "5"
        },
        "description": "是否可评半级",
        "name": "half",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((val: number) => void) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "显示尺寸\n@link SizeMode",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ star?: string | undefined; } | undefined"
        }
      },
      "star": {
        "defaultValue": {
          "value": "star2"
        },
        "description": "星图像",
        "name": "star",
        "required": false,
        "type": {
          "name": "\"heart\" | \"star\" | \"star2\" | undefined",
          "raw": "\"heart\" | \"star\" | \"star2\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"heart\""
            },
            {
              "value": "\"star\""
            },
            {
              "value": "\"star2\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": {
          "value": "5"
        },
        "description": "当前的星级, 从1开始",
        "name": "value",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      }
    }
  },
  "Select": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Select/Select.tsx",
    "description": "",
    "displayName": "@rtdui/core/Select",
    "props": {
      "allowDeselect": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether it should be possible to deselect value by clicking on the selected option",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "checkIconPosition": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "Position of the check icon relative to the option label",
        "name": "checkIconPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | undefined",
          "raw": "\"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "clearButtonProps": {
        "defaultValue": null,
        "description": "",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "ComboboxClearButtonProps | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the clear button should be displayed in the right section when the component has value",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "comboboxProps": {
        "defaultValue": null,
        "description": "Props passed down to <code>Combobox</code> component",
        "name": "comboboxProps",
        "required": false,
        "type": {
          "name": "ComboboxProps | undefined"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data used to generate options",
        "name": "data",
        "required": false,
        "type": {
          "name": "ComboboxData | undefined"
        }
      },
      "defaultDropdownOpened": {
        "defaultValue": null,
        "description": "Uncontrolled dropdown initial opened state",
        "name": "defaultDropdownOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "defaultSearchValue": {
        "defaultValue": null,
        "description": "Default search value",
        "name": "defaultSearchValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled component default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | null | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownOpened": {
        "defaultValue": null,
        "description": "Controlled dropdown opened state",
        "name": "dropdownOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function based on which items are filtered and sorted",
        "name": "filter",
        "required": false,
        "type": {
          "name": "OptionsFilter | undefined"
        }
      },
      "hiddenInputProps": {
        "defaultValue": null,
        "description": "Props passed down to the hidden input",
        "name": "hiddenInputProps",
        "required": false,
        "type": {
          "name": "Omit<Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \"ref\">, \"value\"> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Maximum number of options displayed at a time, <code>Infinity</code> by default",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "maxDropdownHeight": {
        "defaultValue": null,
        "description": "<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default",
        "name": "maxDropdownHeight",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nothingFoundMessage": {
        "defaultValue": null,
        "description": "Message displayed when no option matched current search query, only applicable when <code>searchable</code> prop is set",
        "name": "nothingFoundMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string | null, option: ComboboxItem) => void) | undefined"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "Called when the clear button is clicked",
        "name": "onClear",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onOptionSubmit": {
        "defaultValue": null,
        "description": "Called when option is submitted from dropdown with mouse click or <code>Enter</code> key",
        "name": "onOptionSubmit",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onSearchChange": {
        "defaultValue": null,
        "description": "Called when search changes",
        "name": "onSearchChange",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderOption": {
        "defaultValue": null,
        "description": "A function to render content of the option, replaces the default content of the option",
        "name": "renderOption",
        "required": false,
        "type": {
          "name": "((item: ComboboxLikeRenderOptionInput<ComboboxItem>) => ReactNode) | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "searchValue": {
        "defaultValue": null,
        "description": "Controlled search value",
        "name": "searchValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "searchable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the select should be searchable",
        "name": "searchable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "selectFirstOptionOnChange": {
        "defaultValue": null,
        "description": "Determines whether the first option should be selected when value changes, <code>false</code> by default",
        "name": "selectFirstOptionOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | null | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCheckIcon": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether check icon should be displayed near the selected option label",
        "name": "withCheckIcon",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withScrollArea": {
        "defaultValue": null,
        "description": "Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default",
        "name": "withScrollArea",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "Skeleton": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Skeleton/Skeleton.tsx",
    "description": "",
    "displayName": "Skeleton",
    "props": {
      "box": {
        "defaultValue": null,
        "description": "",
        "name": "box",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "circle": {
        "defaultValue": null,
        "description": "",
        "name": "circle",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "paragraph": {
        "defaultValue": null,
        "description": "",
        "name": "paragraph",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "@rtdui/StatPanel": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/StatPanel/StatPanel.tsx",
    "description": "",
    "displayName": "@rtdui/StatPanel",
    "props": {
      "elevation": {
        "defaultValue": null,
        "description": "",
        "name": "elevation",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "",
        "name": "items",
        "required": true,
        "type": {
          "name": "{ figure?: ReactNode; title?: ReactNode; value?: ReactNode; desc?: ReactNode; actions?: ReactNode; }[]"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ stat?: string | undefined; title?: string | undefined; figure?: string | undefined; value?: string | undefined; desc?: string | undefined; actions?: string | undefined; } | undefined"
        }
      }
    }
  },
  "@rtdui/Steps": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Steps/Steps.tsx",
    "description": "",
    "displayName": "@rtdui/Steps",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "defaultStep": {
        "defaultValue": null,
        "description": "非受控属性, 当前步骤",
        "name": "defaultStep",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "步骤改变时",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((step: number) => void) | undefined"
        }
      },
      "sequential": {
        "defaultValue": {
          "value": "false"
        },
        "description": "是否按顺序跳转, true时只能通过受控属性或api跳转, false时用户可以点击任意步骤跳转",
        "name": "sequential",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "step": {
        "defaultValue": null,
        "description": "受控属性, 当前步骤",
        "name": "step",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "steps": {
        "defaultValue": null,
        "description": "步骤列表",
        "name": "steps",
        "required": true,
        "type": {
          "name": "string[]"
        }
      }
    }
  },
  "@rtdui/Swap": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Swap/Swap.tsx",
    "description": "",
    "displayName": "@rtdui/Swap",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "如果indeterminate未启用时, 应提供并列的两个孩子作为切换元素, 其中第一个为on时的显示元素, 第二个为off时的显示元素;\n否则应提供并列的三个孩子, 其中前两个作为切换元素, 最后一个作为中间态时的显示元素.\n元素可以是任意有效的React元素.",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "indeterminate": {
        "defaultValue": {
          "value": "false"
        },
        "description": "是否启用中间态",
        "name": "indeterminate",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "transitionEffect": {
        "defaultValue": {
          "value": "fade"
        },
        "description": "过渡效果",
        "name": "transitionEffect",
        "required": false,
        "type": {
          "name": "\"rotate\" | \"fade\" | \"flip\" | undefined",
          "raw": "\"rotate\" | \"fade\" | \"flip\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"rotate\""
            },
            {
              "value": "\"fade\""
            },
            {
              "value": "\"flip\""
            }
          ]
        }
      }
    }
  },
  "@rtdui/Switch": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Switch/Switch.tsx",
    "description": "",
    "displayName": "@rtdui/Switch",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "helperText": {
        "defaultValue": null,
        "description": "",
        "name": "helperText",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "labelPosition": {
        "defaultValue": {
          "value": "left"
        },
        "description": "标签居左还是居右",
        "name": "labelPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | undefined",
          "raw": "\"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((checked: boolean) => void) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ input?: string | undefined; label?: string | undefined; helperText?: string | undefined; } | undefined"
        }
      }
    }
  },
  "Tab": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Tabs/Tab.tsx",
    "description": "",
    "displayName": "@rtdui/core/Tab",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Tab label",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "controls control color based on <code>variant</code>",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content displayed on the left side of the label, for example, icon",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content displayed on the right side of the label, for example, icon",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value of associated panel",
        "name": "value",
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "TabList": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Tabs/TabList.tsx",
    "description": "",
    "displayName": "@rtdui/core/TabList",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "<code>Tabs.Tab</code> components",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "grow": {
        "defaultValue": null,
        "description": "Determines whether tabs should take all available space, <code>false</code> by default",
        "name": "grow",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "justify": {
        "defaultValue": {
          "value": "'start'"
        },
        "description": "Tabs alignment",
        "name": "justify",
        "required": false,
        "type": {
          "name": "\"center\" | \"end\" | \"start\" | undefined",
          "raw": "\"center\" | \"end\" | \"start\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      }
    }
  },
  "TabPanel": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Tabs/TabPanel.tsx",
    "description": "",
    "displayName": "@rtdui/core/TabPanel",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Panel content",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "keepMounted": {
        "defaultValue": null,
        "description": "If set to <code>true</code>, the content will be kept mounted, even if <code>keepMounted</code> is set <code>false</code> in the parent <code>Tabs</code> component",
        "name": "keepMounted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value of associated control",
        "name": "value",
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "@rtdui/Tabs": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Tabs/Tabs.tsx",
    "description": "",
    "displayName": "@rtdui/Tabs",
    "props": {
      "activateTabWithKeyboard": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether tab should be activated with arrow key press",
        "name": "activateTabWithKeyboard",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "allowTabDeactivation": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether tab can be deactivated",
        "name": "allowTabDeactivation",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Tabs content",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "color": {
        "defaultValue": {
          "value": "\"primary\""
        },
        "description": "Changes colors of <code>Tabs.Tab</code> components when variant is <code>pills</code> or <code>default</code>, does nothing for other variants",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | null | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Base id, used to generate ids to connect labels with controls, generated randomly by default",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inverted": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether tabs should have inverted styles",
        "name": "inverted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "keepMounted": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If set to <code>false</code>, <code>Tabs.Panel</code> content will be unmounted when the associated tab is not active",
        "name": "keepMounted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "loop": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether arrow key presses should loop though items (first to last and last to first)",
        "name": "loop",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string | null) => void) | undefined"
        }
      },
      "orientation": {
        "defaultValue": {
          "value": "'horizontal'"
        },
        "description": "Tabs orientation",
        "name": "orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\" | undefined",
          "raw": "\"horizontal\" | \"vertical\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"horizontal\""
            },
            {
              "value": "\"vertical\""
            }
          ]
        }
      },
      "placement": {
        "defaultValue": {
          "value": "'left'"
        },
        "description": "<code>Tabs.List</code> placement relative to <code>Tabs.Panel</code>, applicable only when <code>orientation=\"vertical\"</code>",
        "name": "placement",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | undefined",
          "raw": "\"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "radius": {
        "defaultValue": {
          "value": "'md'"
        },
        "description": "\"xs\",\"sm\",\"md\",\"lg\" or any valid CSS value to set <code>border-radius</code>",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | null | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "'default'"
        },
        "description": "variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"pills\" | undefined",
          "raw": "\"outline\" | \"default\" | \"pills\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"pills\""
            }
          ]
        }
      }
    }
  },
  "@rtdui/TabsSimple": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/TabsSimple/TabsSimple.tsx",
    "description": "",
    "displayName": "@rtdui/TabsSimple",
    "props": {
      "initIndex": {
        "defaultValue": null,
        "description": "",
        "name": "initIndex",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "尺寸",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "lifted"
        },
        "description": "变体",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"bordered\" | \"lifted\" | \"boxed\" | undefined",
          "raw": "\"bordered\" | \"lifted\" | \"boxed\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"bordered\""
            },
            {
              "value": "\"lifted\""
            },
            {
              "value": "\"boxed\""
            }
          ]
        }
      }
    }
  },
  "TabsSimplePanel": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/TabsSimple/TabsSimplePanel.tsx",
    "description": "",
    "displayName": "TabsSimplePanel",
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "",
        "name": "index",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "keepMounted": {
        "defaultValue": null,
        "description": "",
        "name": "keepMounted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "TagsInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/TagsInput/Tagsinput.tsx",
    "description": "",
    "displayName": "@rtdui/core/TagsInput",
    "props": {
      "allowDuplicates": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether duplicate tags are allowed",
        "name": "allowDuplicates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to the clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "ComboboxClearButtonProps | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the clear button should be displayed in the right section when the component has value",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "comboboxProps": {
        "defaultValue": null,
        "description": "Props passed down to <code>Combobox</code> component",
        "name": "comboboxProps",
        "required": false,
        "type": {
          "name": "ComboboxProps | undefined"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data displayed in the dropdown",
        "name": "data",
        "required": false,
        "type": {
          "name": "ComboboxStringData | undefined"
        }
      },
      "defaultDropdownOpened": {
        "defaultValue": null,
        "description": "Uncontrolled dropdown initial opened state",
        "name": "defaultDropdownOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "defaultSearchValue": {
        "defaultValue": null,
        "description": "Default search value",
        "name": "defaultSearchValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownOpened": {
        "defaultValue": null,
        "description": "Controlled dropdown opened state",
        "name": "dropdownOpened",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "Function based on which items are filtered and sorted",
        "name": "filter",
        "required": false,
        "type": {
          "name": "OptionsFilter | undefined"
        }
      },
      "hiddenInputProps": {
        "defaultValue": null,
        "description": "Props passed down to the hidden input",
        "name": "hiddenInputProps",
        "required": false,
        "type": {
          "name": "Omit<Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \"ref\">, \"value\"> | undefined"
        }
      },
      "hiddenInputValuesDivider": {
        "defaultValue": {
          "value": "\",\""
        },
        "description": "Divider used to separate values in the hidden input <code>value</code> attribute, <code>','</code> by default",
        "name": "hiddenInputValuesDivider",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "Maximum number of options displayed at a time, <code>Infinity</code> by default",
        "name": "limit",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "maxDropdownHeight": {
        "defaultValue": null,
        "description": "<code>max-height</code> of the dropdown, only applicable when <code>withScrollArea</code> prop is <code>true</code>, <code>250</code> by default",
        "name": "maxDropdownHeight",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "maxTags": {
        "defaultValue": {
          "value": "Infinity"
        },
        "description": "Maximum number of tags",
        "name": "maxTags",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called whe value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: string[]) => void) | undefined"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "Called whe the clear button is clicked",
        "name": "onClear",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onDropdownClose": {
        "defaultValue": null,
        "description": "Called when dropdown closes",
        "name": "onDropdownClose",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onDropdownOpen": {
        "defaultValue": null,
        "description": "Called when dropdown opens",
        "name": "onDropdownOpen",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onDuplicate": {
        "defaultValue": null,
        "description": "Called when user tries to submit a duplicated tag",
        "name": "onDuplicate",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onOptionSubmit": {
        "defaultValue": null,
        "description": "Called when option is submitted from dropdown with mouse click or <code>Enter</code> key",
        "name": "onOptionSubmit",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onRemove": {
        "defaultValue": null,
        "description": "Called when tag is removed",
        "name": "onRemove",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "onSearchChange": {
        "defaultValue": null,
        "description": "Called when search changes",
        "name": "onSearchChange",
        "required": false,
        "type": {
          "name": "((value: string) => void) | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderOption": {
        "defaultValue": null,
        "description": "A function to render content of the option, replaces the default content of the option",
        "name": "renderOption",
        "required": false,
        "type": {
          "name": "((input: ComboboxLikeRenderOptionInput<ComboboxStringItem>) => ReactNode) | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "searchValue": {
        "defaultValue": null,
        "description": "Controlled search value",
        "name": "searchValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "selectFirstOptionOnChange": {
        "defaultValue": null,
        "description": "Determines whether the first option should be selected when value changes, <code>false</code> by default",
        "name": "selectFirstOptionOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "splitChars": {
        "defaultValue": {
          "value": "[',']"
        },
        "description": "Characters that should trigger tags split",
        "name": "splitChars",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "string[] | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withScrollArea": {
        "defaultValue": null,
        "description": "Determines whether the options should be wrapped with <code>ScrollArea.AutoSize</code>, <code>true</code> by default",
        "name": "withScrollArea",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/TextArea": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/TextArea/TextArea.tsx",
    "description": "TextArea继承了textarea的所有属性",
    "displayName": "@rtdui/TextArea",
    "props": {
      "autosize": {
        "defaultValue": {
          "value": "faslse"
        },
        "description": "Determines whether the textarea height should grow with its content",
        "name": "autosize",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "maxRows": {
        "defaultValue": null,
        "description": "Maximum rows for autosize textarea to grow, ignored if <code>autosize</code> prop is not set",
        "name": "maxRows",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "minRows": {
        "defaultValue": null,
        "description": "Minimum rows of autosize textarea, ignored if <code>autosize</code> prop is not set",
        "name": "minRows",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "resize": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Controls <code>resize</code> CSS property",
        "name": "resize",
        "required": false,
        "type": {
          "name": "Resize | undefined",
          "raw": "Resize | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"inline\""
            },
            {
              "value": "\"both\""
            },
            {
              "value": "\"horizontal\""
            },
            {
              "value": "\"vertical\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"block\""
            }
          ]
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/TextInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/TextInput/TextInput.tsx",
    "description": "",
    "displayName": "@rtdui/TextInput",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "Tooltip": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Tooltip/Tooltip.tsx",
    "description": "",
    "displayName": "Tooltip",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "position": {
        "defaultValue": null,
        "description": "气泡提示的显示位置",
        "name": "position",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | \"top\" | \"bottom\" | undefined",
          "raw": "\"left\" | \"right\" | \"top\" | \"bottom\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"top\""
            },
            {
              "value": "\"bottom\""
            }
          ]
        }
      },
      "tip": {
        "defaultValue": null,
        "description": "",
        "name": "tip",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "transition": {
        "defaultValue": {
          "value": "\"fade\""
        },
        "description": "过渡属性",
        "name": "transition",
        "required": false,
        "type": {
          "name": "TransitionType | undefined"
        }
      },
      "transitionDuration": {
        "defaultValue": {
          "value": "250"
        },
        "description": "过渡时间",
        "name": "transitionDuration",
        "required": false,
        "type": {
          "name": "TransitionDuration | undefined"
        }
      },
      "transitionTimingFunction": {
        "defaultValue": null,
        "description": "",
        "name": "transitionTimingFunction",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "Transition": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Transition/Transition.tsx",
    "description": "",
    "displayName": "Transition",
    "props": {
      "appear": {
        "defaultValue": null,
        "description": "是否in为true时挂载时执行过渡",
        "name": "appear",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "duration": {
        "defaultValue": {
          "value": "250"
        },
        "description": "Transition duration in ms",
        "name": "duration",
        "required": false,
        "type": {
          "name": "TransitionDuration | undefined"
        }
      },
      "in": {
        "defaultValue": null,
        "description": "进入过渡",
        "name": "in",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "timingFunction": {
        "defaultValue": {
          "value": "\"ease\""
        },
        "description": "过渡缓动函数",
        "name": "timingFunction",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "transition": {
        "defaultValue": {
          "value": "\"fade\""
        },
        "description": "过渡名称",
        "name": "transition",
        "required": false,
        "type": {
          "name": "TransitionType | undefined"
        }
      },
      "unmountOnExit": {
        "defaultValue": {
          "value": "true"
        },
        "description": "退场过渡完成后是否卸载组件, 初始时不挂载组件",
        "name": "unmountOnExit",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "Tree": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Tree/Tree.tsx",
    "description": "",
    "displayName": "Tree",
    "props": {
      "ItemActionsComponent": {
        "defaultValue": null,
        "description": "",
        "name": "ItemActionsComponent",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "ItemIconComponent": {
        "defaultValue": null,
        "description": "",
        "name": "ItemIconComponent",
        "required": false,
        "type": {
          "name": "ElementType<any, keyof IntrinsicElements> | undefined"
        }
      },
      "childrenField": {
        "defaultValue": null,
        "description": "",
        "name": "childrenField",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "required": true,
        "type": {
          "name": "Record<string, any>[]"
        }
      },
      "displayField": {
        "defaultValue": null,
        "description": "",
        "name": "displayField",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "expandAll": {
        "defaultValue": null,
        "description": "",
        "name": "expandAll",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onItemClick": {
        "defaultValue": null,
        "description": "",
        "name": "onItemClick",
        "required": false,
        "type": {
          "name": "((item: any) => void) | undefined"
        }
      }
    }
  },
  "createOptionalContext": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/utils/createOptionalContext.tsx",
    "description": "",
    "displayName": "createOptionalContext",
    "props": {}
  },
  "createSafeContext": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/utils/createSafeContext.tsx",
    "description": "",
    "displayName": "createSafeContext",
    "props": {}
  },
  "VisuallyHidden": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/VisuallyHidden/VisuallyHidden.tsx",
    "description": "视觉上隐藏,但仍可被屏幕阅读器访问",
    "displayName": "@rtdui/core/VisuallyHidden",
    "props": {}
  },
  "useWatermark": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Watermark/useWatermark.tsx",
    "description": "",
    "displayName": "useWatermark",
    "props": {}
  },
  "BaseSize": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Watermark/useWatermark.tsx",
    "description": "Base size of the canvas, 1 for parallel layout and 2 for alternate layout\nOnly alternate layout is currently supported",
    "displayName": "BaseSize",
    "props": {}
  },
  "@rtdui/Watermark": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Watermark/Watermark.tsx",
    "description": "",
    "displayName": "@rtdui/Watermark",
    "props": {
      "fillColor": {
        "defaultValue": null,
        "description": "填充色",
        "name": "fillColor",
        "required": false,
        "type": {
          "name": "string | CanvasGradient | CanvasPattern | undefined"
        }
      },
      "font": {
        "defaultValue": null,
        "description": "",
        "name": "font",
        "required": false,
        "type": {
          "name": "{ fontSize?: string | number | undefined; fontWeight?: number | \"normal\" | \"light\" | \"weight\" | undefined; fontStyle?: \"none\" | \"normal\" | \"italic\" | \"oblique\" | undefined; fontFamily?: string | undefined; } | undefined"
        }
      },
      "gap": {
        "defaultValue": null,
        "description": "",
        "name": "gap",
        "required": false,
        "type": {
          "name": "[number, number] | undefined"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "imageSrc": {
        "defaultValue": null,
        "description": "图像url",
        "name": "imageSrc",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "",
        "name": "offset",
        "required": false,
        "type": {
          "name": "[number, number] | undefined"
        }
      },
      "rotate": {
        "defaultValue": {
          "value": "-22"
        },
        "description": "旋转度数, 正数顺时针, 负数逆时针",
        "name": "rotate",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "text": {
        "defaultValue": null,
        "description": "",
        "name": "text",
        "required": false,
        "type": {
          "name": "string | string[] | undefined"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      }
    }
  },
  "BodyCell": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/BodyCell.tsx",
    "description": "",
    "displayName": "BodyCell",
    "props": {
      "cell": {
        "defaultValue": null,
        "description": "",
        "name": "cell",
        "required": true,
        "type": {
          "name": "Cell<any, any>"
        }
      },
      "changesRef": {
        "defaultValue": null,
        "description": "",
        "name": "changesRef",
        "required": true,
        "type": {
          "name": "MutableRefObject<any>"
        }
      },
      "enableGrouping": {
        "defaultValue": null,
        "description": "",
        "name": "enableGrouping",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "scrollingTrigger": {
        "defaultValue": null,
        "description": "",
        "name": "scrollingTrigger",
        "required": true,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  "ColumnsVisibility": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/ColumnsVisibility.tsx",
    "description": "",
    "displayName": "ColumnsVisibility",
    "props": {
      "table": {
        "defaultValue": null,
        "description": "",
        "name": "table",
        "required": true,
        "type": {
          "name": "Table<any>"
        }
      }
    }
  },
  "@rtdui/DataTable": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/DataTable.tsx",
    "description": "属性扩展于TableOptions",
    "displayName": "@rtdui/DataTable",
    "props": {
      "borderWidth": {
        "defaultValue": {
          "value": "1"
        },
        "description": "是否显示表格和单元格的边框大小",
        "name": "borderWidth",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "debouncedWait": {
        "defaultValue": {
          "value": "500"
        },
        "description": "过滤编辑器中用户输入生效的延迟毫秒数",
        "name": "debouncedWait",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "enableAutoRowNumber": {
        "defaultValue": {
          "value": "false"
        },
        "description": "自动创建行号列, 自动行号在初始化确定, 后续的排序过滤将不受影响.",
        "name": "enableAutoRowNumber",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "enableClickRowSelection": {
        "defaultValue": {
          "value": "true"
        },
        "description": "启用行选择功能时, 是否启动点击行选择.",
        "name": "enableClickRowSelection",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "enableColumnReorder": {
        "defaultValue": {
          "value": "true"
        },
        "description": "是否允许用户拖放调整列序",
        "name": "enableColumnReorder",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "enableExport": {
        "defaultValue": {
          "value": "false"
        },
        "description": "是否启用表格导出",
        "name": "enableExport",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "enablePagination": {
        "defaultValue": {
          "value": "false"
        },
        "description": "是否启用分页",
        "name": "enablePagination",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "enableStickyHeader": {
        "defaultValue": {
          "value": "true"
        },
        "description": "表格滚动时列头固定在视图顶部",
        "name": "enableStickyHeader",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "enableVirtualized": {
        "defaultValue": {
          "value": "false"
        },
        "description": "滚动虚拟化器",
        "name": "enableVirtualized",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "fixedLayout": {
        "defaultValue": {
          "value": "true"
        },
        "description": "use CSS table-layout fixed",
        "name": "fixedLayout",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onRowClick": {
        "defaultValue": null,
        "description": "行点击事件处理, 只针对数据行触发, 不会对分组行等附加行触发",
        "name": "onRowClick",
        "required": false,
        "type": {
          "name": "((e: MouseEvent<HTMLTableRowElement, MouseEvent>, row: Row<any>) => void) | undefined"
        }
      },
      "onRowDoubleClick": {
        "defaultValue": null,
        "description": "行双击事件处理,, 只针对数据行触发, 不会对分组行等附加行触发",
        "name": "onRowDoubleClick",
        "required": false,
        "type": {
          "name": "((e: MouseEvent<HTMLTableRowElement, MouseEvent>, row: Row<any>) => void) | undefined"
        }
      },
      "selectAllForAllPages": {
        "defaultValue": {
          "value": "true"
        },
        "description": "启用多行选择功能时, 全选时的范围是所有行还是当前页内的行.",
        "name": "selectAllForAllPages",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "showBorder": {
        "defaultValue": {
          "value": "true"
        },
        "description": "是否显示表格和单元格的边框",
        "name": "showBorder",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "showHeader": {
        "defaultValue": {
          "value": "true"
        },
        "description": "是否显示表头行",
        "name": "showHeader",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "showToolbar": {
        "defaultValue": {
          "value": "true"
        },
        "description": "是否显示工具栏",
        "name": "showToolbar",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "表行的高度",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "样式槽",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ container?: string | undefined; toolbar?: string | undefined; groupDropArea?: string | undefined; table?: string | undefined; } | undefined"
        }
      },
      "validate": {
        "defaultValue": null,
        "description": "在编辑模式下, 字段的验证规则\n@param row\n@returns",
        "name": "validate",
        "required": false,
        "type": {
          "name": "Record<string, Rule> | undefined"
        }
      }
    }
  },
  "ExportTable": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/ExportTable.tsx",
    "description": "",
    "displayName": "ExportTable",
    "props": {
      "table": {
        "defaultValue": null,
        "description": "",
        "name": "table",
        "required": true,
        "type": {
          "name": "Table<any>"
        }
      },
      "tableRef": {
        "defaultValue": null,
        "description": "",
        "name": "tableRef",
        "required": true,
        "type": {
          "name": "RefObject<HTMLTableElement>"
        }
      }
    }
  },
  "FilterEditor": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/FilterEditor.tsx",
    "description": "",
    "displayName": "FilterEditor",
    "props": {
      "column": {
        "defaultValue": null,
        "description": "",
        "name": "column",
        "required": true,
        "type": {
          "name": "Column<any, unknown>"
        }
      },
      "debouncedWait": {
        "defaultValue": null,
        "description": "",
        "name": "debouncedWait",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "table": {
        "defaultValue": null,
        "description": "",
        "name": "table",
        "required": true,
        "type": {
          "name": "Table<any>"
        }
      }
    }
  },
  "FooterCell": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/FooterCell.tsx",
    "description": "",
    "displayName": "FooterCell",
    "props": {
      "header": {
        "defaultValue": null,
        "description": "",
        "name": "header",
        "required": true,
        "type": {
          "name": "Header<any, any>"
        }
      },
      "scrollingTrigger": {
        "defaultValue": null,
        "description": "",
        "name": "scrollingTrigger",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "table": {
        "defaultValue": null,
        "description": "",
        "name": "table",
        "required": true,
        "type": {
          "name": "Table<any>"
        }
      }
    }
  },
  "GroupDropArea": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/GroupDropArea.tsx",
    "description": "",
    "displayName": "GroupDropArea",
    "props": {
      "enableGrouping": {
        "defaultValue": null,
        "description": "",
        "name": "enableGrouping",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "table": {
        "defaultValue": null,
        "description": "",
        "name": "table",
        "required": true,
        "type": {
          "name": "Table<any>"
        }
      }
    }
  },
  "HeaderCell": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/HeaderCell.tsx",
    "description": "",
    "displayName": "HeaderCell",
    "props": {
      "debouncedWait": {
        "defaultValue": null,
        "description": "",
        "name": "debouncedWait",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "enableColumnReorder": {
        "defaultValue": null,
        "description": "",
        "name": "enableColumnReorder",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "enableColumnResizing": {
        "defaultValue": null,
        "description": "",
        "name": "enableColumnResizing",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "",
        "name": "header",
        "required": true,
        "type": {
          "name": "Header<any, any>"
        }
      },
      "scrollingTrigger": {
        "defaultValue": null,
        "description": "",
        "name": "scrollingTrigger",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "showHeader": {
        "defaultValue": null,
        "description": "",
        "name": "showHeader",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "table": {
        "defaultValue": null,
        "description": "",
        "name": "table",
        "required": true,
        "type": {
          "name": "Table<any>"
        }
      }
    }
  },
  "IndeterminateCheckbox": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/IndeterminateCheckbox.tsx",
    "description": "",
    "displayName": "IndeterminateCheckbox",
    "props": {
      "indeterminate": {
        "defaultValue": null,
        "description": "",
        "name": "indeterminate",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "TablePagination": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTable/TablePagination.tsx",
    "description": "",
    "displayName": "TablePagination",
    "props": {
      "table": {
        "defaultValue": null,
        "description": "",
        "name": "table",
        "required": true,
        "type": {
          "name": "Table<any>"
        }
      }
    }
  },
  "@rtdui/DataTableSelect": {
    "filePath": "D:/sources/github/rtdui/packages/datatable/src/DataTableSelect/DataTableSelect.tsx",
    "description": "ref属性会转发至内部的input元素",
    "displayName": "@rtdui/DataTableSelect",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "displayField": {
        "defaultValue": null,
        "description": "",
        "name": "displayField",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((ids: string | string[]) => void) | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "({ left?: string | undefined; input?: string | undefined; right?: string | undefined; } & { dropdown?: string | undefined; }) | undefined"
        }
      },
      "tableProps": {
        "defaultValue": null,
        "description": "",
        "name": "tableProps",
        "required": true,
        "type": {
          "name": "DataTableProps"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "@rtdui/RichTextEditor": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/RichTextEditor.tsx",
    "description": "",
    "displayName": "@rtdui/RichTextEditor",
    "props": {
      "editable": {
        "defaultValue": null,
        "description": "",
        "name": "editable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "imageResizable": {
        "defaultValue": null,
        "description": "",
        "name": "imageResizable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ toolbar?: string | undefined; content?: string | undefined; } | undefined"
        }
      },
      "uploadImageUrl": {
        "defaultValue": null,
        "description": "",
        "name": "uploadImageUrl",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "QRCode": {
    "filePath": "D:/sources/github/rtdui/packages/qr-code/src/QRCode/QRCode.tsx",
    "description": "",
    "displayName": "QRCode",
    "props": {
      "bgColor": {
        "defaultValue": {
          "value": "\"#fff\""
        },
        "description": "背景色",
        "name": "bgColor",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "fgColor": {
        "defaultValue": {
          "value": "\"#000\""
        },
        "description": "二维码颜色",
        "name": "fgColor",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "二维码中图片的地址（目前只支持图片地址）",
        "name": "icon",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "iconSize": {
        "defaultValue": {
          "value": "40"
        },
        "description": "二维码中图片的大小",
        "name": "iconSize",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "imageSettings": {
        "defaultValue": null,
        "description": "",
        "name": "imageSettings",
        "required": false,
        "type": {
          "name": "ImageSettings | undefined"
        }
      },
      "includeMargin": {
        "defaultValue": null,
        "description": "",
        "name": "includeMargin",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "level": {
        "defaultValue": {
          "value": "\"M\""
        },
        "description": "纠错级别",
        "name": "level",
        "required": false,
        "type": {
          "name": "\"L\" | \"M\" | \"Q\" | \"H\" | undefined",
          "raw": "\"L\" | \"M\" | \"Q\" | \"H\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"L\""
            },
            {
              "value": "\"M\""
            },
            {
              "value": "\"Q\""
            },
            {
              "value": "\"H\""
            }
          ]
        }
      },
      "onRefresh": {
        "defaultValue": {
          "value": "() => void"
        },
        "description": "expired状态时点击\"点击刷新\"的回调",
        "name": "onRefresh",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "160"
        },
        "description": "二维码的大小",
        "name": "size",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ qr?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "扫描后的文本",
        "name": "value",
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "@rtdui/Highlight": {
    "filePath": "D:/sources/github/rtdui/packages/spotlight/src/Hightlight/Highlight.tsx",
    "description": "",
    "displayName": "@rtdui/Highlight",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "String parts of which must be highlighted",
        "name": "children",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "highlight": {
        "defaultValue": null,
        "description": "Substring or an array of substrings to highlight in <code>children</code>",
        "name": "highlight",
        "required": true,
        "type": {
          "name": "string | string[]"
        }
      }
    }
  },
  "ChipGroup": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Chip/ChipGroup/ChipGroup.tsx",
    "description": "",
    "displayName": "@rtdui/core/ChipGroup",
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Determines whether child <code>Pill</code> components should be disabled",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "gap": {
        "defaultValue": null,
        "description": "Controls spacing between pills, by default controlled by <code>size</code>",
        "name": "gap",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls size of the child <code>Pill</code> components and gap between them, <code>'sm'</code> by default",
        "name": "size",
        "required": false,
        "type": {
          "name": "\"small\" | \"normal\" | undefined",
          "raw": "\"small\" | \"normal\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"normal\""
            }
          ]
        }
      }
    }
  },
  "ChipsInputField": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ChipsInput/ChipsInputField/ChipsInputField.tsx",
    "description": "",
    "displayName": "@rtdui/core/ChipsInputField",
    "props": {
      "pointer": {
        "defaultValue": null,
        "description": "If set, cursor is changed to pointer",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "type": {
        "defaultValue": {
          "value": "\"visible\""
        },
        "description": "Controls input styles when focused. If <code>auto</code> the input is hidden when not focused. If <code>visible</code> the input will always remain visible",
        "name": "type",
        "required": false,
        "type": {
          "name": "\"hidden\" | \"auto\" | \"visible\" | undefined",
          "raw": "\"hidden\" | \"auto\" | \"visible\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      }
    }
  },
  "AlphaSlider": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorPicker/AlphaSlider/AlphaSlider.tsx",
    "description": "",
    "displayName": "@rtdui/core/AlphaSlider",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: number) => void) | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((value: number) => void) | undefined"
        }
      },
      "onScrubEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onScrubEnd",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onScrubStart": {
        "defaultValue": null,
        "description": "",
        "name": "onScrubStart",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "thumbColor": {
        "defaultValue": null,
        "description": "",
        "name": "thumbColor",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "ColorSlider": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorPicker/ColorSlider/ColorSlider.tsx",
    "description": "",
    "displayName": "@rtdui/core/ColorSlider",
    "props": {
      "focusable": {
        "defaultValue": null,
        "description": "",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "maxValue": {
        "defaultValue": null,
        "description": "",
        "name": "maxValue",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: number) => void) | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((value: number) => void) | undefined"
        }
      },
      "onScrubEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onScrubEnd",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onScrubStart": {
        "defaultValue": null,
        "description": "",
        "name": "onScrubStart",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "overlays": {
        "defaultValue": null,
        "description": "",
        "name": "overlays",
        "required": true,
        "type": {
          "name": "CSSProperties[]"
        }
      },
      "round": {
        "defaultValue": null,
        "description": "",
        "name": "round",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "thumbColor": {
        "defaultValue": null,
        "description": "",
        "name": "thumbColor",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "HueSlider": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorPicker/HueSlider/HueSlider.tsx",
    "description": "",
    "displayName": "@rtdui/core/HueSlider",
    "props": {
      "focusable": {
        "defaultValue": null,
        "description": "",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: number) => void) | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((value: number) => void) | undefined"
        }
      },
      "onScrubEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onScrubEnd",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onScrubStart": {
        "defaultValue": null,
        "description": "",
        "name": "onScrubStart",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "thumbColor": {
        "defaultValue": null,
        "description": "",
        "name": "thumbColor",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Saturation": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorPicker/Saturation/Saturation.tsx",
    "description": "",
    "displayName": "@rtdui/core/Saturation",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": true,
        "type": {
          "name": "(color: Partial<HsvaColor>) => void"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeEnd",
        "required": true,
        "type": {
          "name": "(color: Partial<HsvaColor>) => void"
        }
      },
      "onScrubEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onScrubEnd",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onScrubStart": {
        "defaultValue": null,
        "description": "",
        "name": "onScrubStart",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "saturationLabel": {
        "defaultValue": null,
        "description": "",
        "name": "saturationLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "HsvaColor"
        }
      }
    }
  },
  "Swatches": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorPicker/Swatches/Swatches.tsx",
    "description": "",
    "displayName": "@rtdui/core/Swatches",
    "props": {
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "required": true,
        "type": {
          "name": "string[]"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "",
        "name": "focusable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((color: string) => void) | undefined"
        }
      },
      "setValue": {
        "defaultValue": null,
        "description": "",
        "name": "setValue",
        "required": true,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "swatchesPerRow": {
        "defaultValue": null,
        "description": "",
        "name": "swatchesPerRow",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      }
    }
  },
  "ColorPickerThumb": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/ColorPicker/Thumb/Thumb.tsx",
    "description": "",
    "displayName": "@rtdui/core/ColorPickerThumb",
    "props": {
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "required": true,
        "type": {
          "name": "{ x: number; y: number; }"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "ComboboxChevron": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxChevron/ComboboxChevron.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxChevron",
    "props": {
      "error": {
        "defaultValue": null,
        "description": "",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "ComboboxClearButton": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxClearButton/ComboboxClearButton.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxClearButton",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "raw": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"neutral\""
            }
          ]
        }
      },
      "endIcon": {
        "defaultValue": null,
        "description": "右侧图标元素",
        "name": "endIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "full width",
        "name": "fullWidth",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "ghost": {
        "defaultValue": null,
        "description": "无边框和背景",
        "name": "ghost",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "glass": {
        "defaultValue": null,
        "description": "毛玻璃效果,需要有背景才有效果",
        "name": "glass",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "link": {
        "defaultValue": null,
        "description": "link样式的按钮",
        "name": "link",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "是否在左侧显示加载动画图标",
        "name": "loading",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "loadingPosition": {
        "defaultValue": {
          "value": "\"left\""
        },
        "description": "加载动画图标的显示位置",
        "name": "loadingPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | undefined",
          "raw": "\"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "noAnimation": {
        "defaultValue": null,
        "description": "无点击动画",
        "name": "noAnimation",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "",
        "name": "onClear",
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "outline": {
        "defaultValue": null,
        "description": "边框按钮",
        "name": "outline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "sharp": {
        "defaultValue": null,
        "description": "矩形或圆形, 用于单字符或图标",
        "name": "sharp",
        "required": false,
        "type": {
          "name": "\"circle\" | \"square\" | undefined",
          "raw": "\"circle\" | \"square\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"square\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "startIcon": {
        "defaultValue": null,
        "description": "左侧图标元素",
        "name": "startIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "ComboboxDropdown": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxDropdown/ComboboxDropdown.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxDropdown",
    "props": {
      "hidden": {
        "defaultValue": null,
        "description": "Determines whether the dropdown should be hidden, for example, when there are no options to display",
        "name": "hidden",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "ComboboxDropdownTarget": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxDropdownTarget",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Target element",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "refProp": {
        "defaultValue": null,
        "description": "Key of the prop that should be used to access element ref",
        "name": "refProp",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "ComboboxEmpty": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxEmpty/ComboboxEmpty.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxEmpty",
    "props": {}
  },
  "ComboboxEventsTarget": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxEventsTarget/ComboboxEventsTarget.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxEventsTarget",
    "props": {
      "autoComplete": {
        "defaultValue": null,
        "description": "Input autocomplete attribute",
        "name": "autoComplete",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Target element",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "refProp": {
        "defaultValue": null,
        "description": "Key of the prop that should be used to access element ref",
        "name": "refProp",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "targetType": {
        "defaultValue": null,
        "description": "Determines which events should be handled by the target element.\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.\n<code>input</code> by default.",
        "name": "targetType",
        "required": false,
        "type": {
          "name": "\"button\" | \"input\" | undefined",
          "raw": "\"button\" | \"input\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"input\""
            }
          ]
        }
      },
      "withAriaAttributes": {
        "defaultValue": null,
        "description": "Determines whether the target should have <code>aria-</code> attributes, <code>true</code> by default",
        "name": "withAriaAttributes",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withExpandedAttribute": {
        "defaultValue": null,
        "description": "Determines whether the target should have <code>aria-expanded</code> attribute, <code>false</code> by default",
        "name": "withExpandedAttribute",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withKeyboardNavigation": {
        "defaultValue": null,
        "description": "Determines whether component should respond to keyboard events, <code>true</code> by default",
        "name": "withKeyboardNavigation",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "ComboboxFooter": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxFooter/ComboboxFooter.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxFooter",
    "props": {}
  },
  "ComboboxGroup": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxGroup/ComboboxGroup.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxGroup",
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Group label",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "ComboboxHeader": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxHeader/ComboboxHeader.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxHeader",
    "props": {}
  },
  "ComboboxHiddenInput": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxHiddenInput/ComboboxHiddenInput.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxHiddenInput",
    "props": {
      "value": {
        "defaultValue": null,
        "description": "Input value",
        "name": "value",
        "required": true,
        "type": {
          "name": "string | string[] | null"
        }
      },
      "valuesDivider": {
        "defaultValue": null,
        "description": "Divider character that is used to transform array values to string, <code>','</code> by default",
        "name": "valuesDivider",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "ComboboxOption": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxOption/ComboboxOption.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxOption",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the option is selected",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Determines whether the option can be selected",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Determines whether item is selected, useful for virtualized comboboxes",
        "name": "selected",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Option value",
        "name": "value",
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  "ComboboxOptions": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxOptions/ComboboxOptions.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxOptions",
    "props": {
      "labelledBy": {
        "defaultValue": null,
        "description": "Id of the element that should label the options list",
        "name": "labelledBy",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "ComboboxSearch": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxSearch/ComboboxSearch.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxSearch",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAriaAttributes": {
        "defaultValue": null,
        "description": "Determines whether the search input should have <code>aria-</code> attribute, <code>true</code> by default",
        "name": "withAriaAttributes",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withKeyboardNavigation": {
        "defaultValue": null,
        "description": "Determines whether the search input should handle keyboard navigation, <code>true</code> by default",
        "name": "withKeyboardNavigation",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "ComboboxTarget": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/ComboboxTarget/ComboboxTarget.tsx",
    "description": "",
    "displayName": "@rtdui/core/ComboboxTarget",
    "props": {
      "autoComplete": {
        "defaultValue": null,
        "description": "Input autocomplete attribute",
        "name": "autoComplete",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Target element",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "refProp": {
        "defaultValue": null,
        "description": "Key of the prop that should be used to access element ref",
        "name": "refProp",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "targetType": {
        "defaultValue": null,
        "description": "Determines which events should be handled by the target element.\n<code>button</code> target type handles <code>Space</code> and <code>Enter</code> keys to toggle dropdown opened state.\n<code>input</code> by default.",
        "name": "targetType",
        "required": false,
        "type": {
          "name": "\"button\" | \"input\" | undefined",
          "raw": "\"button\" | \"input\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"input\""
            }
          ]
        }
      },
      "withAriaAttributes": {
        "defaultValue": null,
        "description": "Determines whether the target should have <code>aria-</code> attributes, <code>true</code> by default",
        "name": "withAriaAttributes",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withExpandedAttribute": {
        "defaultValue": null,
        "description": "Determines whether the target should have <code>aria-expanded</code> attribute, <code>false</code> by default",
        "name": "withExpandedAttribute",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withKeyboardNavigation": {
        "defaultValue": null,
        "description": "Determines whether component should respond to keyboard events, <code>true</code> by default",
        "name": "withKeyboardNavigation",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "OptionsDropdown": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Combobox/OptionsDropdown/OptionsDropdown.tsx",
    "description": "",
    "displayName": "OptionsDropdown",
    "props": {
      "checkIconPosition": {
        "defaultValue": null,
        "description": "",
        "name": "checkIconPosition",
        "required": false,
        "type": {
          "name": "\"left\" | \"right\" | undefined",
          "raw": "\"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "required": true,
        "type": {
          "name": "OptionsData"
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "",
        "name": "filter",
        "required": true,
        "type": {
          "name": "OptionsFilter | undefined"
        }
      },
      "filterOptions": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "filterOptions",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "",
        "name": "hidden",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hiddenWhenEmpty": {
        "defaultValue": null,
        "description": "",
        "name": "hiddenWhenEmpty",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "",
        "name": "labelId",
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "limit": {
        "defaultValue": null,
        "description": "",
        "name": "limit",
        "required": true,
        "type": {
          "name": "number | undefined"
        }
      },
      "maxDropdownHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxDropdownHeight",
        "required": true,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "nothingFoundMessage": {
        "defaultValue": null,
        "description": "",
        "name": "nothingFoundMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "renderOption": {
        "defaultValue": null,
        "description": "",
        "name": "renderOption",
        "required": false,
        "type": {
          "name": "((input: ComboboxLikeRenderOptionInput<any>) => ReactNode) | undefined"
        }
      },
      "search": {
        "defaultValue": null,
        "description": "",
        "name": "search",
        "required": true,
        "type": {
          "name": "string | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | string[] | null | undefined"
        }
      },
      "withCheckIcon": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "withCheckIcon",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "@rtdui/Col": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Grid/Col/Col.tsx",
    "description": "",
    "displayName": "@rtdui/Col",
    "props": {
      "offset": {
        "defaultValue": null,
        "description": "",
        "name": "offset",
        "required": false,
        "type": {
          "name": "ResponsiveProp<number> | undefined"
        }
      },
      "order": {
        "defaultValue": null,
        "description": "",
        "name": "order",
        "required": false,
        "type": {
          "name": "ResponsiveProp<number> | undefined"
        }
      },
      "span": {
        "defaultValue": null,
        "description": "",
        "name": "span",
        "required": false,
        "type": {
          "name": "ResponsiveProp<ColSpan> | undefined"
        }
      }
    }
  },
  "InputDescription": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Input/InputDescription/InputDescription.tsx",
    "description": "",
    "displayName": "@rtdui/core/InputDescription",
    "props": {
      "size": {
        "defaultValue": {
          "value": "\"xs\""
        },
        "description": "Controls description <code>font-size</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "InputError": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Input/InputError/InputError.tsx",
    "description": "",
    "displayName": "@rtdui/core/InputError",
    "props": {
      "size": {
        "defaultValue": {
          "value": "\"xs\""
        },
        "description": "Controls error <code>font-size</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "InputLabel": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Input/InputLabel/InputLabel.tsx",
    "description": "",
    "displayName": "@rtdui/core/InputLabel",
    "props": {
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "Root element of the label",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Determines whether the required asterisk should be displayed",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls label <code>font-size</code>, <code>'sm'</code> by default",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "InputPlaceholder": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Input/InputPlaceholder/InputPlaceholder.tsx",
    "description": "InputPlaceholder组件用于给不支持placeholder特性的元素(如button)附加占位符",
    "displayName": "@rtdui/core/InputPlaceholder",
    "props": {
      "error": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If set, the placeholder will have error styles",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  "InputWrapper": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Input/InputWrapper/InputWrapper.tsx",
    "description": "",
    "displayName": "@rtdui/core/InputWrapper",
    "props": {
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Error</code> component. If not set, error is not rendered.",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "required": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Adds required attribute to the input and a red asterisk on the right side of label",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls size of <code>Input.Label</code>, <code>Input.Description</code> and <code>Input.Error</code> components",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "PopoverDropdown": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Popover/PopoverDropdown/PopoverDropdown.tsx",
    "description": "",
    "displayName": "@rtdui/core/PopoverDropdown",
    "props": {}
  },
  "PopoverTarget": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Popover/PopoverTarget/PopoverTarget.tsx",
    "description": "",
    "displayName": "@rtdui/core/PopoverTarget",
    "props": {}
  },
  "Marks": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Slider/Marks/Marks.tsx",
    "description": "",
    "displayName": "Marks",
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "required": true,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "inverted": {
        "defaultValue": null,
        "description": "",
        "name": "inverted",
        "required": true,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "marks": {
        "defaultValue": null,
        "description": "",
        "name": "marks",
        "required": true,
        "type": {
          "name": "{ value: number; label?: ReactNode; }[] | undefined"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "",
        "name": "max",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "",
        "name": "min",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "",
        "name": "offset",
        "required": true,
        "type": {
          "name": "number | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ trackContainer?: string | undefined; track?: string | undefined; bar?: string | undefined; mark?: string | undefined; markLabel?: string | undefined; thumb?: string | undefined; label?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "@rtdui/RangeSlider": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Slider/RangeSlider/RangeSlider.tsx",
    "description": "",
    "displayName": "@rtdui/RangeSlider",
    "props": {
      "color": {
        "defaultValue": {
          "value": "'primary'"
        },
        "description": "Key of Preset or any valid CSS color, controls color of track and thumb",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | Color | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "RangeSliderValue | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables slider",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hiddenInputProps": {
        "defaultValue": null,
        "description": "Props passed down to the hidden input",
        "name": "hiddenInputProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \"ref\"> | undefined"
        }
      },
      "inverted": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether track values representation should be inverted",
        "name": "inverted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "label": {
        "defaultValue": {
          "value": "(v) => v"
        },
        "description": "Function to generate label or any react node to render instead, set to null to disable label",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode | ((value: number) => ReactNode)"
        }
      },
      "labelAlwaysOn": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the label should be visible when the slider is not being dragged or hovered",
        "name": "labelAlwaysOn",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "labelTransitionProps": {
        "defaultValue": {
          "value": "{transition: 'fade', duration: 150 }"
        },
        "description": "Props passed down to the Transition component,",
        "name": "labelTransitionProps",
        "required": false,
        "type": {
          "name": "Pick<TransitionProps, \"transition\" | \"duration\" | \"timingFunction\"> | undefined"
        }
      },
      "marks": {
        "defaultValue": null,
        "description": "Marks displayed on the track",
        "name": "marks",
        "required": false,
        "type": {
          "name": "{ value: number; label?: ReactNode; }[] | undefined"
        }
      },
      "max": {
        "defaultValue": {
          "value": "100"
        },
        "description": "Maximum possible value",
        "name": "max",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "maxRange": {
        "defaultValue": {
          "value": "Infinity"
        },
        "description": "Maximum range interval",
        "name": "maxRange",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "min": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Minimal possible value",
        "name": "min",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "minRange": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Minimal range interval",
        "name": "minRange",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Hidden input name, use with uncontrolled component",
        "name": "name",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: RangeSliderValue) => void) | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "Called when user stops dragging slider or changes value with arrows",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((value: RangeSliderValue) => void) | undefined"
        }
      },
      "precision": {
        "defaultValue": null,
        "description": "Number of significant digits after the decimal point",
        "name": "precision",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "'xl'"
        },
        "description": "Key of Preset or any valid CSS value to set border-radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "scale": {
        "defaultValue": {
          "value": "(v) => v"
        },
        "description": "A transformation function to change the scale of the slider",
        "name": "scale",
        "required": false,
        "type": {
          "name": "((value: number) => number) | undefined"
        }
      },
      "showLabelOnHover": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether thumb label should be displayed when the slider is hovered,",
        "name": "showLabelOnHover",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "'md'"
        },
        "description": "Controls size of the track",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "样式槽,可自定义内部组件的样式",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ root?: string | undefined; trackContainer?: string | undefined; track?: string | undefined; bar?: string | undefined; mark?: string | undefined; markLabel?: string | undefined; thumb?: string | undefined; label?: string | undefined; } | undefined"
        }
      },
      "step": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Number by which value will be incremented/decremented with thumb drag and arrows",
        "name": "step",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "thumbChildren": {
        "defaultValue": null,
        "description": "Content rendered inside thumb",
        "name": "thumbChildren",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "thumbFromLabel": {
        "defaultValue": null,
        "description": "First thumb aria-label",
        "name": "thumbFromLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "thumbSize": {
        "defaultValue": {
          "value": "size*2"
        },
        "description": "Thumb width and height",
        "name": "thumbSize",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "thumbToLabel": {
        "defaultValue": null,
        "description": "Second thumb aria-label",
        "name": "thumbToLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled value",
        "name": "value",
        "required": false,
        "type": {
          "name": "RangeSliderValue | undefined"
        }
      }
    }
  },
  "@rtdui/Slider": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Slider/Slider/Slider.tsx",
    "description": "",
    "displayName": "@rtdui/Slider",
    "props": {
      "color": {
        "defaultValue": {
          "value": "'primary'"
        },
        "description": "Key of Preset or any valid CSS color, controls color of track and thumb",
        "name": "color",
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\" | \"accent\" | \"info\" | \"success\" | \"warning\" | \"error\" | \"neutral\" | Color | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Uncontrolled default value",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disables slider",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hiddenInputProps": {
        "defaultValue": null,
        "description": "Props passed down to the hidden input",
        "name": "hiddenInputProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, \"ref\"> | undefined"
        }
      },
      "inverted": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether track values representation should be inverted",
        "name": "inverted",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "label": {
        "defaultValue": {
          "value": "(v) => v"
        },
        "description": "Function to generate label or any react node to render instead, set to null to disable label",
        "name": "label",
        "required": false,
        "type": {
          "name": "ReactNode | ((value: number) => ReactNode)"
        }
      },
      "labelAlwaysOn": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the label should be visible when the slider is not being dragged or hovered",
        "name": "labelAlwaysOn",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "labelTransitionProps": {
        "defaultValue": {
          "value": "{transition: 'fade', duration: 150 }"
        },
        "description": "Props passed down to the Transition component,",
        "name": "labelTransitionProps",
        "required": false,
        "type": {
          "name": "Pick<TransitionProps, \"transition\" | \"duration\" | \"timingFunction\"> | undefined"
        }
      },
      "marks": {
        "defaultValue": null,
        "description": "Marks displayed on the track",
        "name": "marks",
        "required": false,
        "type": {
          "name": "{ value: number; label?: ReactNode; }[] | undefined"
        }
      },
      "max": {
        "defaultValue": {
          "value": "100"
        },
        "description": "Maximum possible value",
        "name": "max",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "min": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Minimal possible value",
        "name": "min",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Hidden input name, use with uncontrolled component",
        "name": "name",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: number) => void) | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "Called when user stops dragging slider or changes value with arrows",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((value: number) => void) | undefined"
        }
      },
      "precision": {
        "defaultValue": null,
        "description": "Number of significant digits after the decimal point",
        "name": "precision",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "'xl'"
        },
        "description": "Key of Preset or any valid CSS value to set border-radius",
        "name": "radius",
        "required": false,
        "type": {
          "name": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "raw": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"sm\""
            },
            {
              "value": "\"md\""
            },
            {
              "value": "\"lg\""
            },
            {
              "value": "\"xl\""
            },
            {
              "value": "\"2xl\""
            }
          ]
        }
      },
      "scale": {
        "defaultValue": {
          "value": "(v) => v"
        },
        "description": "A transformation function to change the scale of the slider",
        "name": "scale",
        "required": false,
        "type": {
          "name": "((value: number) => number) | undefined"
        }
      },
      "showLabelOnHover": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether thumb label should be displayed when the slider is hovered,",
        "name": "showLabelOnHover",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "'md'"
        },
        "description": "Controls size of the track",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "样式槽, 可自定义内部组件的样式",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ root?: string | undefined; trackContainer?: string | undefined; track?: string | undefined; bar?: string | undefined; mark?: string | undefined; markLabel?: string | undefined; thumb?: string | undefined; label?: string | undefined; } | undefined"
        }
      },
      "step": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Number by which value will be incremented/decremented with thumb drag and arrows",
        "name": "step",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "thumbChildren": {
        "defaultValue": null,
        "description": "Content rendered inside thumb",
        "name": "thumbChildren",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "thumbLabel": {
        "defaultValue": null,
        "description": "Thumb aria-label",
        "name": "thumbLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "thumbSize": {
        "defaultValue": {
          "value": "size*2"
        },
        "description": "Thumb width and height",
        "name": "thumbSize",
        "required": false,
        "type": {
          "name": "string | number | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled value",
        "name": "value",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      }
    }
  },
  "@rtdui/Thumb": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Slider/Thumb/Thumb.tsx",
    "description": "",
    "displayName": "@rtdui/Thumb",
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "required": true,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dragging": {
        "defaultValue": null,
        "description": "",
        "name": "dragging",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "isHovered": {
        "defaultValue": null,
        "description": "",
        "name": "isHovered",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelAlwaysOn": {
        "defaultValue": null,
        "description": "",
        "name": "labelAlwaysOn",
        "required": true,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "labelTransitionProps": {
        "defaultValue": null,
        "description": "",
        "name": "labelTransitionProps",
        "required": false,
        "type": {
          "name": "Pick<TransitionProps, \"transition\" | \"duration\" | \"timingFunction\"> | undefined"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "",
        "name": "max",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "",
        "name": "min",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "",
        "name": "onFocus",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onKeyDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyDownCapture",
        "required": false,
        "type": {
          "name": "((event: KeyboardEvent<HTMLDivElement>) => void) | undefined"
        }
      },
      "onMouseDown": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDown",
        "required": false,
        "type": {
          "name": "((event: TouchEvent<HTMLDivElement> | MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "showLabelOnHover": {
        "defaultValue": null,
        "description": "",
        "name": "showLabelOnHover",
        "required": true,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ trackContainer?: string | undefined; track?: string | undefined; bar?: string | undefined; mark?: string | undefined; markLabel?: string | undefined; thumb?: string | undefined; label?: string | undefined; } | undefined"
        }
      },
      "thumbLabel": {
        "defaultValue": null,
        "description": "",
        "name": "thumbLabel",
        "required": true,
        "type": {
          "name": "string | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Track": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Slider/Track/Track.tsx",
    "description": "",
    "displayName": "Track",
    "props": {
      "containerProps": {
        "defaultValue": null,
        "description": "",
        "name": "containerProps",
        "required": false,
        "type": {
          "name": "(Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ref?: ((instance: HTMLDivElement | null) => void) | ... 2 more ... | undefined; }) | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "required": true,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "filled": {
        "defaultValue": null,
        "description": "",
        "name": "filled",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "inverted": {
        "defaultValue": null,
        "description": "",
        "name": "inverted",
        "required": true,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "marks": {
        "defaultValue": null,
        "description": "",
        "name": "marks",
        "required": true,
        "type": {
          "name": "{ value: number; label?: ReactNode; }[] | undefined"
        }
      },
      "marksOffset": {
        "defaultValue": null,
        "description": "",
        "name": "marksOffset",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "",
        "name": "max",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "",
        "name": "min",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "",
        "name": "offset",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ trackContainer?: string | undefined; track?: string | undefined; bar?: string | undefined; mark?: string | undefined; markLabel?: string | undefined; thumb?: string | undefined; label?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "Calendar": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/Calendar/Calendar.tsx",
    "description": "",
    "displayName": "@rtdui/dates/Calendar",
    "props": {
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultDate": {
        "defaultValue": null,
        "description": "Initial date that is displayed, used for uncontrolled component",
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "defaultLevel": {
        "defaultValue": null,
        "description": "Initial level displayed to the user (decade, year, month), used for uncontrolled component",
        "name": "defaultLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine whether the day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "((date: Date) => boolean) | undefined"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1 (Monday)"
        },
        "description": "number 0-6, 0 – Sunday, 6 – Saturday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "getDayAriaLabel": {
        "defaultValue": null,
        "description": "Assigns aria-label to days based on date",
        "name": "getDayAriaLabel",
        "required": false,
        "type": {
          "name": "((date: Date) => string) | undefined"
        }
      },
      "getDayProps": {
        "defaultValue": null,
        "description": "Adds props to Day component based on date",
        "name": "getDayProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Omit<Partial<DayProps>, \"styles\" | \"classNames\" | \"vars\">) | undefined"
        }
      },
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Determines whether outside dates should be hidden, defaults to false",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Determines whether weekdays row should be hidden, defaults to false",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "level": {
        "defaultValue": null,
        "description": "Current level displayed to the user (decade, year, month), used for controlled component",
        "name": "level",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "maxLevel": {
        "defaultValue": null,
        "description": "Max level that user can go up to (decade, year, month), defaults to decade",
        "name": "maxLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minLevel": {
        "defaultValue": null,
        "description": "Min level that user can go down to (decade, year, month), defaults to month",
        "name": "minLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "monthLabelFormat": {
        "defaultValue": {
          "value": "\"MMMM yyyy\""
        },
        "description": "date-fns format string label format to display month label or a function that returns month label based on month value",
        "name": "monthLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((month: Date) => ReactNode) | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onLevelChange": {
        "defaultValue": null,
        "description": "Called when level changes",
        "name": "onLevelChange",
        "required": false,
        "type": {
          "name": "((level: CalendarLevel) => void) | undefined"
        }
      },
      "onMonthMouseEnter": {
        "defaultValue": null,
        "description": "Called when mouse enters month control",
        "name": "onMonthMouseEnter",
        "required": false,
        "type": {
          "name": "((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void) | undefined"
        }
      },
      "onMonthSelect": {
        "defaultValue": null,
        "description": "Called when user clicks month on year level",
        "name": "onMonthSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextMonth": {
        "defaultValue": null,
        "description": "Called when next month button is clicked",
        "name": "onNextMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextYear": {
        "defaultValue": null,
        "description": "Called when next year button is clicked",
        "name": "onNextYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousMonth": {
        "defaultValue": null,
        "description": "Called when previous month button is clicked",
        "name": "onPreviousMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousYear": {
        "defaultValue": null,
        "description": "Called when previous year button is clicked",
        "name": "onPreviousYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onYearMouseEnter": {
        "defaultValue": null,
        "description": "Called when mouse enters year control",
        "name": "onYearMouseEnter",
        "required": false,
        "type": {
          "name": "((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void) | undefined"
        }
      },
      "onYearSelect": {
        "defaultValue": null,
        "description": "Called when user clicks year on decade level",
        "name": "onYearSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "static": {
        "defaultValue": null,
        "description": "Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way",
        "name": "static",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format for weekdays names, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      },
      "weekendDays": {
        "defaultValue": null,
        "description": "Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider",
        "name": "weekendDays",
        "required": false,
        "type": {
          "name": "DayOfWeek[] | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "CalendarHeader": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/CalendarHeader/CalendarHeader.tsx",
    "description": "",
    "displayName": "@rtdui/dates/CalendarHeader",
    "props": {
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label displayed between next and previous buttons",
        "name": "label",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "levelControlAriaLabel": {
        "defaultValue": null,
        "description": "aria-label for level control",
        "name": "levelControlAriaLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "nextDisabled": {
        "defaultValue": null,
        "description": "Determines whether next control should be disabled, defaults to false",
        "name": "nextDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onLevelClick": {
        "defaultValue": null,
        "description": "Called when level button is clicked",
        "name": "onLevelClick",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onNext": {
        "defaultValue": null,
        "description": "Called when next button is clicked",
        "name": "onNext",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPrevious": {
        "defaultValue": null,
        "description": "Called when previous button is clicked",
        "name": "onPrevious",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "previousDisabled": {
        "defaultValue": null,
        "description": "Determines whether previous control should be disabled, defaults to false",
        "name": "previousDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ previous?: string | undefined; next?: string | undefined; } | undefined"
        }
      },
      "withNext": {
        "defaultValue": null,
        "description": "Determines whether next control should be rendered, defaults to true",
        "name": "withNext",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withPrevious": {
        "defaultValue": null,
        "description": "Determines whether previous control should be rendered, defaults to true",
        "name": "withPrevious",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "DateInput": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/DateInput/DateInput.tsx",
    "description": "",
    "displayName": "@rtdui/dates/DateInput",
    "props": {
      "allowDeselect": {
        "defaultValue": null,
        "description": "Determines whether value can be deselected when the user clicks on the selected date in the calendar (only when clearable prop is set), defaults to true if clearable prop is set, false otherwise",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props added to clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> | undefined"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Determines whether input value can be cleared, adds clear button to right section, false by default",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "dateParser": {
        "defaultValue": null,
        "description": "Parses user input to convert it to Date object",
        "name": "dateParser",
        "required": false,
        "type": {
          "name": "((value: string) => Date | null) | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultDate": {
        "defaultValue": null,
        "description": "Initial date that is displayed, used for uncontrolled component",
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "defaultLevel": {
        "defaultValue": null,
        "description": "Initial level displayed to the user (decade, year, month), used for uncontrolled component",
        "name": "defaultLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine whether the day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "((date: Date) => boolean) | undefined"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1 (Monday)"
        },
        "description": "number 0-6, 0 – Sunday, 6 – Saturday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "fixOnBlur": {
        "defaultValue": null,
        "description": "Determines whether input value should be reverted to last known valid value on blur, true by default",
        "name": "fixOnBlur",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "getDayAriaLabel": {
        "defaultValue": null,
        "description": "Assigns aria-label to days based on date",
        "name": "getDayAriaLabel",
        "required": false,
        "type": {
          "name": "((date: Date) => string) | undefined"
        }
      },
      "getDayProps": {
        "defaultValue": null,
        "description": "Adds props to Day component based on date",
        "name": "getDayProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Omit<Partial<DayProps>, \"styles\" | \"classNames\" | \"vars\">) | undefined"
        }
      },
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Determines whether outside dates should be hidden, defaults to false",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Determines whether weekdays row should be hidden, defaults to false",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "level": {
        "defaultValue": null,
        "description": "Current level displayed to the user (decade, year, month), used for controlled component",
        "name": "level",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "maxLevel": {
        "defaultValue": null,
        "description": "Max level that user can go up to (decade, year, month), defaults to decade",
        "name": "maxLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthLabelFormat": {
        "defaultValue": {
          "value": "\"MMMM yyyy\""
        },
        "description": "date-fns format string label format to display month label or a function that returns month label based on month value",
        "name": "monthLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((month: Date) => ReactNode) | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextDisabled": {
        "defaultValue": null,
        "description": "Determines whether next control should be disabled, defaults to false",
        "name": "nextDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: DateValue) => void) | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onLevelChange": {
        "defaultValue": null,
        "description": "Called when level changes",
        "name": "onLevelChange",
        "required": false,
        "type": {
          "name": "((level: CalendarLevel) => void) | undefined"
        }
      },
      "onLevelClick": {
        "defaultValue": null,
        "description": "Called when level button is clicked",
        "name": "onLevelClick",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onNext": {
        "defaultValue": null,
        "description": "Called when next button is clicked",
        "name": "onNext",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextMonth": {
        "defaultValue": null,
        "description": "Called when next month button is clicked",
        "name": "onNextMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextYear": {
        "defaultValue": null,
        "description": "Called when next year button is clicked",
        "name": "onNextYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPrevious": {
        "defaultValue": null,
        "description": "Called when previous button is clicked",
        "name": "onPrevious",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousMonth": {
        "defaultValue": null,
        "description": "Called when previous month button is clicked",
        "name": "onPreviousMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousYear": {
        "defaultValue": null,
        "description": "Called when previous year button is clicked",
        "name": "onPreviousYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "popoverProps": {
        "defaultValue": null,
        "description": "Props added to Popover component",
        "name": "popoverProps",
        "required": false,
        "type": {
          "name": "Partial<Omit<PopoverProps, \"children\">> | undefined"
        }
      },
      "preserveTime": {
        "defaultValue": null,
        "description": "Determines whether time (hours, minutes, seconds and milliseconds) should be preserved when new date is picked, true by default",
        "name": "preserveTime",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousDisabled": {
        "defaultValue": null,
        "description": "Determines whether previous control should be disabled, defaults to false",
        "name": "previousDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "valueFormat": {
        "defaultValue": {
          "value": "\"yyyy-MM-dd\""
        },
        "description": "date-fns format to display input value",
        "name": "valueFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format for weekdays names, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      },
      "weekendDays": {
        "defaultValue": null,
        "description": "Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider",
        "name": "weekendDays",
        "required": false,
        "type": {
          "name": "DayOfWeek[] | undefined"
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withNext": {
        "defaultValue": null,
        "description": "Determines whether next control should be rendered, defaults to true",
        "name": "withNext",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withPrevious": {
        "defaultValue": null,
        "description": "Determines whether previous control should be rendered, defaults to true",
        "name": "withPrevious",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "DatePicker": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/DatePicker/DatePicker.tsx",
    "description": "",
    "displayName": "@rtdui/dates/DatePicker",
    "props": {
      "allowDeselect": {
        "defaultValue": null,
        "description": "Determines whether user can deselect the date by clicking on selected item, applicable only when type=\"default\"",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "allowSingleDateInRange": {
        "defaultValue": null,
        "description": "Determines whether single year can be selected as range, applicable only when type=\"range\"",
        "name": "allowSingleDateInRange",
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultDate": {
        "defaultValue": null,
        "description": "Initial date that is displayed, used for uncontrolled component",
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "defaultLevel": {
        "defaultValue": null,
        "description": "Initial level displayed to the user (decade, year, month), used for uncontrolled component",
        "name": "defaultLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine whether the day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "((date: Date) => boolean) | undefined"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1 (Monday)"
        },
        "description": "number 0-6, 0 – Sunday, 6 – Saturday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "getDayAriaLabel": {
        "defaultValue": null,
        "description": "Assigns aria-label to days based on date",
        "name": "getDayAriaLabel",
        "required": false,
        "type": {
          "name": "((date: Date) => string) | undefined"
        }
      },
      "getDayProps": {
        "defaultValue": null,
        "description": "Adds props to Day component based on date",
        "name": "getDayProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Omit<Partial<DayProps>, \"styles\" | \"classNames\" | \"vars\">) | undefined"
        }
      },
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Determines whether outside dates should be hidden, defaults to false",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Determines whether weekdays row should be hidden, defaults to false",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "level": {
        "defaultValue": null,
        "description": "Current level displayed to the user (decade, year, month), used for controlled component",
        "name": "level",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "maxLevel": {
        "defaultValue": {
          "value": "decade"
        },
        "description": "Max level that user can go up to (decade, year, month)",
        "name": "maxLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthLabelFormat": {
        "defaultValue": {
          "value": "\"MMMM yyyy\""
        },
        "description": "date-fns format string label format to display month label or a function that returns month label based on month value",
        "name": "monthLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((month: Date) => ReactNode) | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: DateValue) => void) | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onLevelChange": {
        "defaultValue": null,
        "description": "Called when level changes",
        "name": "onLevelChange",
        "required": false,
        "type": {
          "name": "((level: CalendarLevel) => void) | undefined"
        }
      },
      "onMonthMouseEnter": {
        "defaultValue": null,
        "description": "Called when mouse enters month control",
        "name": "onMonthMouseEnter",
        "required": false,
        "type": {
          "name": "((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void) | undefined"
        }
      },
      "onMonthSelect": {
        "defaultValue": null,
        "description": "Called when user clicks month on year level",
        "name": "onMonthSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextMonth": {
        "defaultValue": null,
        "description": "Called when next month button is clicked",
        "name": "onNextMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextYear": {
        "defaultValue": null,
        "description": "Called when next year button is clicked",
        "name": "onNextYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousMonth": {
        "defaultValue": null,
        "description": "Called when previous month button is clicked",
        "name": "onPreviousMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousYear": {
        "defaultValue": null,
        "description": "Called when previous year button is clicked",
        "name": "onPreviousYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onYearMouseEnter": {
        "defaultValue": null,
        "description": "Called when mouse enters year control",
        "name": "onYearMouseEnter",
        "required": false,
        "type": {
          "name": "((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void) | undefined"
        }
      },
      "onYearSelect": {
        "defaultValue": null,
        "description": "Called when user clicks year on decade level",
        "name": "onYearSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Picker type: range, multiple or default",
        "name": "type",
        "required": false,
        "type": {
          "name": "DatePickerType | undefined",
          "raw": "DatePickerType | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"range\""
            },
            {
              "value": "\"default\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format for weekdays names, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      },
      "weekendDays": {
        "defaultValue": null,
        "description": "Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider",
        "name": "weekendDays",
        "required": false,
        "type": {
          "name": "DayOfWeek[] | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "DatePickerInput": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/DatePickerInput/DatePickerInput.tsx",
    "description": "",
    "displayName": "@rtdui/dates/DatePickerInput",
    "props": {
      "allowDeselect": {
        "defaultValue": null,
        "description": "Determines whether user can deselect the date by clicking on selected item, applicable only when type=\"default\"",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "allowSingleDateInRange": {
        "defaultValue": null,
        "description": "Determines whether single year can be selected as range, applicable only when type=\"range\"",
        "name": "allowSingleDateInRange",
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether input value can be cleared, adds clear button to right section",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnChange": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed when date is selected, not applicable when type=\"multiple\"",
        "name": "closeOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultDate": {
        "defaultValue": null,
        "description": "Initial date that is displayed, used for uncontrolled component",
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "defaultLevel": {
        "defaultValue": null,
        "description": "Initial level displayed to the user (decade, year, month), used for uncontrolled component",
        "name": "defaultLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownType": {
        "defaultValue": {
          "value": "\"popover\""
        },
        "description": "Type of dropdown, defaults to popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"popover\" | \"modal\" | undefined",
          "raw": "\"popover\" | \"modal\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"popover\""
            },
            {
              "value": "\"modal\""
            }
          ]
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine whether the day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "((date: Date) => boolean) | undefined"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1 (Monday)"
        },
        "description": "number 0-6, 0 – Sunday, 6 – Saturday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "getDayAriaLabel": {
        "defaultValue": null,
        "description": "Assigns aria-label to days based on date",
        "name": "getDayAriaLabel",
        "required": false,
        "type": {
          "name": "((date: Date) => string) | undefined"
        }
      },
      "getDayProps": {
        "defaultValue": null,
        "description": "Adds props to Day component based on date",
        "name": "getDayProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Omit<Partial<DayProps>, \"styles\" | \"classNames\" | \"vars\">) | undefined"
        }
      },
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Determines whether outside dates should be hidden, defaults to false",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Determines whether weekdays row should be hidden, defaults to false",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "labelSeparator": {
        "defaultValue": null,
        "description": "Separator between range value",
        "name": "labelSeparator",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "level": {
        "defaultValue": null,
        "description": "Current level displayed to the user (decade, year, month), used for controlled component",
        "name": "level",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "maxLevel": {
        "defaultValue": {
          "value": "decade"
        },
        "description": "Max level that user can go up to (decade, year, month)",
        "name": "maxLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthLabelFormat": {
        "defaultValue": {
          "value": "\"MMMM yyyy\""
        },
        "description": "date-fns format string label format to display month label or a function that returns month label based on month value",
        "name": "monthLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((month: Date) => ReactNode) | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: DateValue) => void) | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onLevelChange": {
        "defaultValue": null,
        "description": "Called when level changes",
        "name": "onLevelChange",
        "required": false,
        "type": {
          "name": "((level: CalendarLevel) => void) | undefined"
        }
      },
      "onMonthMouseEnter": {
        "defaultValue": null,
        "description": "Called when mouse enters month control",
        "name": "onMonthMouseEnter",
        "required": false,
        "type": {
          "name": "((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void) | undefined"
        }
      },
      "onMonthSelect": {
        "defaultValue": null,
        "description": "Called when user clicks month on year level",
        "name": "onMonthSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextMonth": {
        "defaultValue": null,
        "description": "Called when next month button is clicked",
        "name": "onNextMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextYear": {
        "defaultValue": null,
        "description": "Called when next year button is clicked",
        "name": "onNextYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousMonth": {
        "defaultValue": null,
        "description": "Called when previous month button is clicked",
        "name": "onPreviousMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousYear": {
        "defaultValue": null,
        "description": "Called when previous year button is clicked",
        "name": "onPreviousYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onYearMouseEnter": {
        "defaultValue": null,
        "description": "Called when mouse enters year control",
        "name": "onYearMouseEnter",
        "required": false,
        "type": {
          "name": "((event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void) | undefined"
        }
      },
      "onYearSelect": {
        "defaultValue": null,
        "description": "Called when user clicks year on decade level",
        "name": "onYearSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Input placeholder",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "popoverProps": {
        "defaultValue": null,
        "description": "Props passed down to Popover component",
        "name": "popoverProps",
        "required": false,
        "type": {
          "name": "Partial<Omit<PopoverProps, \"children\">> | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Determines whether the user can modify the value",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "sortDates": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dates value should be sorted before onChange call, only applicable when type=\"multiple\"",
        "name": "sortDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Picker type: range, multiple or default",
        "name": "type",
        "required": false,
        "type": {
          "name": "DatePickerType | undefined",
          "raw": "DatePickerType | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"range\""
            },
            {
              "value": "\"default\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "valueFormat": {
        "defaultValue": {
          "value": "\"yyyy-MM-dd\""
        },
        "description": "date-fns format to display input value",
        "name": "valueFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "valueFormatter": {
        "defaultValue": null,
        "description": "A function to format selected dates values into a string. By default, date is formatted based on the input type.",
        "name": "valueFormatter",
        "required": false,
        "type": {
          "name": "DateFormatter | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format for weekdays names, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      },
      "weekendDays": {
        "defaultValue": null,
        "description": "Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider",
        "name": "weekendDays",
        "required": false,
        "type": {
          "name": "DayOfWeek[] | undefined"
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "DatesProvider": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/DatesProvider/DatesProvider.tsx",
    "description": "",
    "displayName": "DatesProvider",
    "props": {
      "settings": {
        "defaultValue": null,
        "description": "",
        "name": "settings",
        "required": true,
        "type": {
          "name": "Partial<DatesProviderValue>"
        }
      }
    }
  },
  "DateTimePickerInput": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/DateTimePickerInput/DateTimePickerInput.tsx",
    "description": "",
    "displayName": "@rtdui/dates/DateTimePickerInput",
    "props": {
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether input value can be cleared, adds clear button to right section",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultLevel": {
        "defaultValue": null,
        "description": "Initial level displayed to the user (decade, year, month), used for uncontrolled component",
        "name": "defaultLevel",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownType": {
        "defaultValue": {
          "value": "\"popover\""
        },
        "description": "Type of dropdown, defaults to popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"popover\" | \"modal\" | undefined",
          "raw": "\"popover\" | \"modal\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"popover\""
            },
            {
              "value": "\"modal\""
            }
          ]
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine whether the day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "((date: Date) => boolean) | undefined"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1 (Monday)"
        },
        "description": "number 0-6, 0 – Sunday, 6 – Saturday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "getDayAriaLabel": {
        "defaultValue": null,
        "description": "Assigns aria-label to days based on date",
        "name": "getDayAriaLabel",
        "required": false,
        "type": {
          "name": "((date: Date) => string) | undefined"
        }
      },
      "getDayProps": {
        "defaultValue": null,
        "description": "Adds props to Day component based on date",
        "name": "getDayProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Omit<Partial<DayProps>, \"styles\" | \"classNames\" | \"vars\">) | undefined"
        }
      },
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Determines whether outside dates should be hidden, defaults to false",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Determines whether weekdays row should be hidden, defaults to false",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "labelSeparator": {
        "defaultValue": null,
        "description": "Separator between range value",
        "name": "labelSeparator",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "level": {
        "defaultValue": null,
        "description": "Current level displayed to the user (decade, year, month), used for controlled component",
        "name": "level",
        "required": false,
        "type": {
          "name": "CalendarLevel | undefined",
          "raw": "CalendarLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthLabelFormat": {
        "defaultValue": {
          "value": "\"MMMM yyyy\""
        },
        "description": "date-fns format string label format to display month label or a function that returns month label based on month value",
        "name": "monthLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((month: Date) => ReactNode) | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: DateValue) => void) | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onLevelChange": {
        "defaultValue": null,
        "description": "Called when level changes",
        "name": "onLevelChange",
        "required": false,
        "type": {
          "name": "((level: CalendarLevel) => void) | undefined"
        }
      },
      "onMonthSelect": {
        "defaultValue": null,
        "description": "Called when user clicks month on year level",
        "name": "onMonthSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextMonth": {
        "defaultValue": null,
        "description": "Called when next month button is clicked",
        "name": "onNextMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextYear": {
        "defaultValue": null,
        "description": "Called when next year button is clicked",
        "name": "onNextYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousMonth": {
        "defaultValue": null,
        "description": "Called when previous month button is clicked",
        "name": "onPreviousMonth",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousYear": {
        "defaultValue": null,
        "description": "Called when previous year button is clicked",
        "name": "onPreviousYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onYearSelect": {
        "defaultValue": null,
        "description": "Called when user clicks year on decade level",
        "name": "onYearSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Input placeholder",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "popoverProps": {
        "defaultValue": null,
        "description": "Props passed down to Popover component",
        "name": "popoverProps",
        "required": false,
        "type": {
          "name": "Partial<Omit<PopoverProps, \"children\">> | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Determines whether the user can modify the value",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "sortDates": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dates value should be sorted before onChange call, only applicable when type=\"multiple\"",
        "name": "sortDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "submitButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to the submit button",
        "name": "submitButtonProps",
        "required": false,
        "type": {
          "name": "ButtonProps | undefined"
        }
      },
      "timeInputProps": {
        "defaultValue": null,
        "description": "TimeInput component props",
        "name": "timeInputProps",
        "required": false,
        "type": {
          "name": "(TimeInputProps & { ref?: ((instance: HTMLInputElement | null) => void) | RefObject<HTMLInputElement> | null | undefined; }) | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Controlled component value",
        "name": "value",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "valueFormat": {
        "defaultValue": null,
        "description": "date-fns format to display input value, \"DD/MM/YYYY HH:mm\" by default",
        "name": "valueFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "valueFormatter": {
        "defaultValue": null,
        "description": "A function to format selected dates values into a string. By default, date is formatted based on the input type.",
        "name": "valueFormatter",
        "required": false,
        "type": {
          "name": "DateFormatter | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format for weekdays names, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      },
      "weekendDays": {
        "defaultValue": null,
        "description": "Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider",
        "name": "weekendDays",
        "required": false,
        "type": {
          "name": "DayOfWeek[] | undefined"
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withSeconds": {
        "defaultValue": null,
        "description": "Determines whether seconds input should be rendered",
        "name": "withSeconds",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "Day": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/Day/Day.tsx",
    "description": "",
    "displayName": "@rtdui/dates/Day",
    "props": {
      "date": {
        "defaultValue": null,
        "description": "Date that should be displayed",
        "name": "date",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "firstInRange": {
        "defaultValue": null,
        "description": "Determines whether the day is first in range selection, <code>false</code> by default",
        "name": "firstInRange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "Determines whether the day should not de displayed, <code>false</code> by default",
        "name": "hidden",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "inRange": {
        "defaultValue": null,
        "description": "Determines whether the day is selected in range, <code>false</code> by default",
        "name": "inRange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "lastInRange": {
        "defaultValue": null,
        "description": "Determines whether the day is last in range selection, <code>false</code> by default",
        "name": "lastInRange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "outside": {
        "defaultValue": null,
        "description": "Determines whether the day is outside of the current month, <code>false</code> by default",
        "name": "outside",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Determines whether the day is selected, <code>false</code> by default",
        "name": "selected",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "static": {
        "defaultValue": null,
        "description": "Determines which element should be used as root, <code>'button'</code> by default, <code>'div'</code> if static prop is set",
        "name": "static",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "weekend": {
        "defaultValue": null,
        "description": "Determines whether the day should be considered to be a weekend, <code>false</code> by default",
        "name": "weekend",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "DecadeLevel": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/DecadeLevel/DecadeLevel.tsx",
    "description": "",
    "displayName": "@rtdui/dates/DecadeLevel",
    "props": {
      "decade": {
        "defaultValue": null,
        "description": "Decade that is currently displayed",
        "name": "decade",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "levelControlAriaLabel": {
        "defaultValue": null,
        "description": "aria-label for change level control",
        "name": "levelControlAriaLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "nextDisabled": {
        "defaultValue": null,
        "description": "Determines whether next control should be disabled, defaults to false",
        "name": "nextDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onNext": {
        "defaultValue": null,
        "description": "Called when next button is clicked",
        "name": "onNext",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPrevious": {
        "defaultValue": null,
        "description": "Called when previous button is clicked",
        "name": "onPrevious",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "previousDisabled": {
        "defaultValue": null,
        "description": "Determines whether previous control should be disabled, defaults to false",
        "name": "previousDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withNext": {
        "defaultValue": null,
        "description": "Determines whether next control should be rendered, defaults to true",
        "name": "withNext",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withPrevious": {
        "defaultValue": null,
        "description": "Determines whether previous control should be rendered, defaults to true",
        "name": "withPrevious",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "DecadeLevelGroup": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/DecadeLevelGroup/DecadeLevelGroup.tsx",
    "description": "",
    "displayName": "@rtdui/dates/DecadeLevelGroup",
    "props": {
      "decade": {
        "defaultValue": null,
        "description": "Decade that is currently displayed",
        "name": "decade",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "levelControlAriaLabel": {
        "defaultValue": null,
        "description": "Function that returns level control aria-label based on year date",
        "name": "levelControlAriaLabel",
        "required": false,
        "type": {
          "name": "string | ((decade: Date) => string) | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "nextDisabled": {
        "defaultValue": null,
        "description": "Determines whether next control should be disabled, defaults to false",
        "name": "nextDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onNext": {
        "defaultValue": null,
        "description": "Called when next button is clicked",
        "name": "onNext",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPrevious": {
        "defaultValue": null,
        "description": "Called when previous button is clicked",
        "name": "onPrevious",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "previousDisabled": {
        "defaultValue": null,
        "description": "Determines whether previous control should be disabled, defaults to false",
        "name": "previousDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "HiddenDatesInput": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/HiddenDatesInput/HiddenDatesInput.tsx",
    "description": "",
    "displayName": "@rtdui/dates/HiddenDatesInput",
    "props": {
      "form": {
        "defaultValue": null,
        "description": "",
        "name": "form",
        "required": true,
        "type": {
          "name": "string | undefined"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "required": true,
        "type": {
          "name": "string | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "required": true,
        "type": {
          "name": "DatePickerType",
          "raw": "DatePickerType",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"range\""
            },
            {
              "value": "\"default\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "HiddenDatesInputValue"
        }
      }
    }
  },
  "LevelsGroup": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/LevelsGroup/LevelsGroup.tsx",
    "description": "",
    "displayName": "@rtdui/dates/LevelsGroup",
    "props": {
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "Month": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/Month/Month.tsx",
    "description": "",
    "displayName": "@rtdui/dates/Month",
    "props": {
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine whether the day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "((date: Date) => boolean) | undefined"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1 (Monday)"
        },
        "description": "number 0-6, 0 – Sunday, 6 – Saturday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "getDayAriaLabel": {
        "defaultValue": null,
        "description": "Assigns aria-label to days based on date",
        "name": "getDayAriaLabel",
        "required": false,
        "type": {
          "name": "((date: Date) => string) | undefined"
        }
      },
      "getDayProps": {
        "defaultValue": null,
        "description": "Adds props to Day component based on date",
        "name": "getDayProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Omit<Partial<DayProps>, \"styles\" | \"classNames\" | \"vars\">) | undefined"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Determines whether outside dates should be hidden, defaults to false",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Determines whether weekdays row should be hidden, defaults to false",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Month to display",
        "name": "month",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "static": {
        "defaultValue": null,
        "description": "Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way",
        "name": "static",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format for weekdays names, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      },
      "weekendDays": {
        "defaultValue": null,
        "description": "Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider",
        "name": "weekendDays",
        "required": false,
        "type": {
          "name": "DayOfWeek[] | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": null,
        "description": "Determines whether controls should be separated by spacing, true by default",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "MonthLevel": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/MonthLevel/MonthLevel.tsx",
    "description": "",
    "displayName": "@rtdui/dates/MonthLevel",
    "props": {
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine whether the day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "((date: Date) => boolean) | undefined"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1 (Monday)"
        },
        "description": "number 0-6, 0 – Sunday, 6 – Saturday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "getDayAriaLabel": {
        "defaultValue": null,
        "description": "Assigns aria-label to days based on date",
        "name": "getDayAriaLabel",
        "required": false,
        "type": {
          "name": "((date: Date) => string) | undefined"
        }
      },
      "getDayProps": {
        "defaultValue": null,
        "description": "Adds props to Day component based on date",
        "name": "getDayProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Omit<Partial<DayProps>, \"styles\" | \"classNames\" | \"vars\">) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Determines whether outside dates should be hidden, defaults to false",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Determines whether weekdays row should be hidden, defaults to false",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "levelControlAriaLabel": {
        "defaultValue": null,
        "description": "aria-label for change level control",
        "name": "levelControlAriaLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Month that is currently displayed",
        "name": "month",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "monthLabelFormat": {
        "defaultValue": {
          "value": "\"MMMM yyyy\""
        },
        "description": "date-fns format string label format to display month label or a function that returns month label based on month value",
        "name": "monthLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((month: Date) => ReactNode) | undefined"
        }
      },
      "nextDisabled": {
        "defaultValue": null,
        "description": "Determines whether next control should be disabled, defaults to false",
        "name": "nextDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onLevelClick": {
        "defaultValue": null,
        "description": "Called when level button is clicked",
        "name": "onLevelClick",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onNext": {
        "defaultValue": null,
        "description": "Called when next button is clicked",
        "name": "onNext",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPrevious": {
        "defaultValue": null,
        "description": "Called when previous button is clicked",
        "name": "onPrevious",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "previousDisabled": {
        "defaultValue": null,
        "description": "Determines whether previous control should be disabled, defaults to false",
        "name": "previousDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "static": {
        "defaultValue": null,
        "description": "Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way",
        "name": "static",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format for weekdays names, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      },
      "weekendDays": {
        "defaultValue": null,
        "description": "Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider",
        "name": "weekendDays",
        "required": false,
        "type": {
          "name": "DayOfWeek[] | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": null,
        "description": "Determines whether controls should be separated by spacing, true by default",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withNext": {
        "defaultValue": null,
        "description": "Determines whether next control should be rendered, defaults to true",
        "name": "withNext",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withPrevious": {
        "defaultValue": null,
        "description": "Determines whether previous control should be rendered, defaults to true",
        "name": "withPrevious",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "MonthLevelGroup": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/MonthLevelGroup/MonthLevelGroup.tsx",
    "description": "",
    "displayName": "@rtdui/dates/MonthLevelGroup",
    "props": {
      "excludeDate": {
        "defaultValue": null,
        "description": "Callback function to determine whether the day should be disabled",
        "name": "excludeDate",
        "required": false,
        "type": {
          "name": "((date: Date) => boolean) | undefined"
        }
      },
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1 (Monday)"
        },
        "description": "number 0-6, 0 – Sunday, 6 – Saturday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "getDayAriaLabel": {
        "defaultValue": null,
        "description": "Assigns aria-label to days based on date",
        "name": "getDayAriaLabel",
        "required": false,
        "type": {
          "name": "((date: Date) => string) | undefined"
        }
      },
      "getDayProps": {
        "defaultValue": null,
        "description": "Adds props to Day component based on date",
        "name": "getDayProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Omit<Partial<DayProps>, \"styles\" | \"classNames\" | \"vars\">) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideOutsideDates": {
        "defaultValue": null,
        "description": "Determines whether outside dates should be hidden, defaults to false",
        "name": "hideOutsideDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "hideWeekdays": {
        "defaultValue": null,
        "description": "Determines whether weekdays row should be hidden, defaults to false",
        "name": "hideWeekdays",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "levelControlAriaLabel": {
        "defaultValue": null,
        "description": "Function that returns level control aria-label based on month date",
        "name": "levelControlAriaLabel",
        "required": false,
        "type": {
          "name": "string | ((month: Date) => string) | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "month": {
        "defaultValue": null,
        "description": "Month that is currently displayed",
        "name": "month",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "monthLabelFormat": {
        "defaultValue": {
          "value": "\"MMMM yyyy\""
        },
        "description": "date-fns format string label format to display month label or a function that returns month label based on month value",
        "name": "monthLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((month: Date) => ReactNode) | undefined"
        }
      },
      "nextDisabled": {
        "defaultValue": null,
        "description": "Determines whether next control should be disabled, defaults to false",
        "name": "nextDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onLevelClick": {
        "defaultValue": null,
        "description": "Called when level button is clicked",
        "name": "onLevelClick",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onNext": {
        "defaultValue": null,
        "description": "Called when next button is clicked",
        "name": "onNext",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPrevious": {
        "defaultValue": null,
        "description": "Called when previous button is clicked",
        "name": "onPrevious",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "previousDisabled": {
        "defaultValue": null,
        "description": "Determines whether previous control should be disabled, defaults to false",
        "name": "previousDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "renderDay": {
        "defaultValue": null,
        "description": "Controls day value rendering",
        "name": "renderDay",
        "required": false,
        "type": {
          "name": "((date: Date) => ReactNode) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "static": {
        "defaultValue": null,
        "description": "Determines whether days should be static, static days can be used to display month if it is not expected that user will interact with the component in any way",
        "name": "static",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format for weekdays names, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      },
      "weekendDays": {
        "defaultValue": null,
        "description": "Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider",
        "name": "weekendDays",
        "required": false,
        "type": {
          "name": "DayOfWeek[] | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": null,
        "description": "Determines whether controls should be separated by spacing, true by default",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "MonthPicker": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/MonthPicker/MonthPicker.tsx",
    "description": "",
    "displayName": "@rtdui/dates/MonthPicker",
    "props": {
      "allowDeselect": {
        "defaultValue": null,
        "description": "Determines whether user can deselect the date by clicking on selected item, applicable only when type=\"default\"",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "allowSingleDateInRange": {
        "defaultValue": null,
        "description": "Determines whether single year can be selected as range, applicable only when type=\"range\"",
        "name": "allowSingleDateInRange",
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultDate": {
        "defaultValue": null,
        "description": "Initial date that is displayed, used for uncontrolled component",
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "defaultLevel": {
        "defaultValue": null,
        "description": "Initial level displayed to the user (decade, year, month), used for uncontrolled component",
        "name": "defaultLevel",
        "required": false,
        "type": {
          "name": "MonthPickerLevel | undefined",
          "raw": "MonthPickerLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "level": {
        "defaultValue": null,
        "description": "Current level displayed to the user (decade, year, month), used for controlled component",
        "name": "level",
        "required": false,
        "type": {
          "name": "MonthPickerLevel | undefined",
          "raw": "MonthPickerLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "maxLevel": {
        "defaultValue": null,
        "description": "Max level that user can go up to (decade, year), defaults to decade",
        "name": "maxLevel",
        "required": false,
        "type": {
          "name": "MonthPickerLevel | undefined",
          "raw": "MonthPickerLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: DateValue) => void) | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onLevelChange": {
        "defaultValue": null,
        "description": "Called when level changes",
        "name": "onLevelChange",
        "required": false,
        "type": {
          "name": "((level: MonthPickerLevel) => void) | undefined"
        }
      },
      "onMonthSelect": {
        "defaultValue": null,
        "description": "Called when month is selected",
        "name": "onMonthSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextYear": {
        "defaultValue": null,
        "description": "Called when next year button is clicked",
        "name": "onNextYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousYear": {
        "defaultValue": null,
        "description": "Called when previous year button is clicked",
        "name": "onPreviousYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Picker type: range, multiple or default",
        "name": "type",
        "required": false,
        "type": {
          "name": "DatePickerType | undefined",
          "raw": "DatePickerType | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"range\""
            },
            {
              "value": "\"default\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "MonthPickerInput": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/MonthPickerInput/MonthPickerInput.tsx",
    "description": "",
    "displayName": "@rtdui/dates/MonthPickerInput",
    "props": {
      "allowDeselect": {
        "defaultValue": null,
        "description": "Determines whether user can deselect the date by clicking on selected item, applicable only when type=\"default\"",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "allowSingleDateInRange": {
        "defaultValue": null,
        "description": "Determines whether single year can be selected as range, applicable only when type=\"range\"",
        "name": "allowSingleDateInRange",
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether input value can be cleared, adds clear button to right section",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnChange": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed when date is selected, not applicable when type=\"multiple\"",
        "name": "closeOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultDate": {
        "defaultValue": null,
        "description": "Initial date that is displayed, used for uncontrolled component",
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "defaultLevel": {
        "defaultValue": null,
        "description": "Initial level displayed to the user (decade, year, month), used for uncontrolled component",
        "name": "defaultLevel",
        "required": false,
        "type": {
          "name": "MonthPickerLevel | undefined",
          "raw": "MonthPickerLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownType": {
        "defaultValue": {
          "value": "\"popover\""
        },
        "description": "Type of dropdown, defaults to popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"popover\" | \"modal\" | undefined",
          "raw": "\"popover\" | \"modal\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"popover\""
            },
            {
              "value": "\"modal\""
            }
          ]
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "labelSeparator": {
        "defaultValue": null,
        "description": "Separator between range value",
        "name": "labelSeparator",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "level": {
        "defaultValue": null,
        "description": "Current level displayed to the user (decade, year, month), used for controlled component",
        "name": "level",
        "required": false,
        "type": {
          "name": "MonthPickerLevel | undefined",
          "raw": "MonthPickerLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "maxLevel": {
        "defaultValue": null,
        "description": "Max level that user can go up to (decade, year), defaults to decade",
        "name": "maxLevel",
        "required": false,
        "type": {
          "name": "MonthPickerLevel | undefined",
          "raw": "MonthPickerLevel | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"decade\""
            }
          ]
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: DateValue) => void) | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onLevelChange": {
        "defaultValue": null,
        "description": "Called when level changes",
        "name": "onLevelChange",
        "required": false,
        "type": {
          "name": "((level: MonthPickerLevel) => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextYear": {
        "defaultValue": null,
        "description": "Called when next year button is clicked",
        "name": "onNextYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousYear": {
        "defaultValue": null,
        "description": "Called when previous year button is clicked",
        "name": "onPreviousYear",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Input placeholder",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "popoverProps": {
        "defaultValue": null,
        "description": "Props passed down to Popover component",
        "name": "popoverProps",
        "required": false,
        "type": {
          "name": "Partial<Omit<PopoverProps, \"children\">> | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Determines whether the user can modify the value",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "sortDates": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dates value should be sorted before onChange call, only applicable when type=\"multiple\"",
        "name": "sortDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Picker type: range, multiple or default",
        "name": "type",
        "required": false,
        "type": {
          "name": "DatePickerType | undefined",
          "raw": "DatePickerType | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"range\""
            },
            {
              "value": "\"default\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "valueFormat": {
        "defaultValue": {
          "value": "\"MMM yyyy\""
        },
        "description": "date-fns format to display input value",
        "name": "valueFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "valueFormatter": {
        "defaultValue": null,
        "description": "A function to format selected dates values into a string. By default, date is formatted based on the input type.",
        "name": "valueFormatter",
        "required": false,
        "type": {
          "name": "DateFormatter | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "MonthsList": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/MonthsList/MonthsList.tsx",
    "description": "",
    "displayName": "@rtdui/dates/MonthsList",
    "props": {
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": null,
        "description": "Determines whether controls should be separated by spacing, true by default",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "year": {
        "defaultValue": null,
        "description": "Year for which months list should be displayed",
        "name": "year",
        "required": true,
        "type": {
          "name": "Date"
        }
      }
    }
  },
  "PickerControl": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/PickerControl/PickerControl.tsx",
    "description": "",
    "displayName": "@rtdui/dates/PickerControl",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Control children",
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Determines whether control should be disabled",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "firstInRange": {
        "defaultValue": null,
        "description": "Determines whether control is first in range selection",
        "name": "firstInRange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "inRange": {
        "defaultValue": null,
        "description": "Determines whether control is selected in range",
        "name": "inRange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "lastInRange": {
        "defaultValue": null,
        "description": "Determines whether control is last in range selection",
        "name": "lastInRange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Determines whether control should have selected styles",
        "name": "selected",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "PickerInputBase": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/PickerInputBase/PickerInputBase.tsx",
    "description": "",
    "displayName": "@rtdui/dates/PickerInputBase",
    "props": {
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether input value can be cleared, adds clear button to right section",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnChange": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed when date is selected, not applicable when type=\"multiple\"",
        "name": "closeOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownHandlers": {
        "defaultValue": null,
        "description": "",
        "name": "dropdownHandlers",
        "required": true,
        "type": {
          "name": "{ readonly open: () => void; readonly close: () => void; readonly toggle: () => void; }"
        }
      },
      "dropdownOpened": {
        "defaultValue": null,
        "description": "",
        "name": "dropdownOpened",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "dropdownType": {
        "defaultValue": {
          "value": "\"popover\""
        },
        "description": "Type of dropdown, defaults to popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"popover\" | \"modal\" | undefined",
          "raw": "\"popover\" | \"modal\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"popover\""
            },
            {
              "value": "\"modal\""
            }
          ]
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "formattedValue": {
        "defaultValue": null,
        "description": "",
        "name": "formattedValue",
        "required": true,
        "type": {
          "name": "string | null | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "labelSeparator": {
        "defaultValue": null,
        "description": "Separator between range value",
        "name": "labelSeparator",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "",
        "name": "onClear",
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Input placeholder",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "popoverProps": {
        "defaultValue": null,
        "description": "Props passed down to Popover component",
        "name": "popoverProps",
        "required": false,
        "type": {
          "name": "Partial<Omit<PopoverProps, \"children\">> | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Determines whether the user can modify the value",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "shouldClear": {
        "defaultValue": null,
        "description": "",
        "name": "shouldClear",
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "sortDates": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dates value should be sorted before onChange call, only applicable when type=\"multiple\"",
        "name": "sortDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "required": true,
        "type": {
          "name": "DatePickerType",
          "raw": "DatePickerType",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"range\""
            },
            {
              "value": "\"default\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": true,
        "type": {
          "name": "HiddenDatesInputValue"
        }
      },
      "valueFormatter": {
        "defaultValue": null,
        "description": "A function to format selected dates values into a string. By default, date is formatted based on the input type.",
        "name": "valueFormatter",
        "required": false,
        "type": {
          "name": "DateFormatter | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "TimeInput": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/TimeInput/TimeInput.tsx",
    "description": "",
    "displayName": "@rtdui/dates/TimeInput",
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "maxTime": {
        "defaultValue": null,
        "description": "Maximum possible string time, if withSeconds is true, time should be in format HH:mm:ss, otherwise HH:mm",
        "name": "maxTime",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "minTime": {
        "defaultValue": null,
        "description": "Minimum possible string time, if withSeconds is true, time should be in format HH:mm:ss, otherwise HH:mm",
        "name": "minTime",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": {
          "value": "\"sm\""
        },
        "description": "Controls input <code>height</code> and horizontal <code>padding</code>",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withSeconds": {
        "defaultValue": null,
        "description": "Determines whether seconds input should be rendered",
        "name": "withSeconds",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "TimePicker": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/TimePicker/TimePicker.tsx",
    "description": "",
    "displayName": "TimePicker",
    "props": {
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "loop": {
        "defaultValue": null,
        "description": "",
        "name": "loop",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((val: string) => void) | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withSeconds": {
        "defaultValue": null,
        "description": "",
        "name": "withSeconds",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "Wheel": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/TimePicker/Wheel.tsx",
    "description": "",
    "displayName": "@rtdui/dates/Wheel",
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "getValue": {
        "defaultValue": null,
        "description": "custom render value function",
        "name": "getValue",
        "required": false,
        "type": {
          "name": "((relative: number, absolute: number) => string) | undefined"
        }
      },
      "initIdx": {
        "defaultValue": null,
        "description": "",
        "name": "initIdx",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "length": {
        "defaultValue": null,
        "description": "wheels number",
        "name": "length",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "loop": {
        "defaultValue": null,
        "description": "",
        "name": "loop",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((rel: number) => void) | undefined"
        }
      },
      "onChangeEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeEnd",
        "required": false,
        "type": {
          "name": "((rel: number) => void) | undefined"
        }
      },
      "perspective": {
        "defaultValue": null,
        "description": "",
        "name": "perspective",
        "required": false,
        "type": {
          "name": "\"center\" | \"left\" | \"right\" | undefined",
          "raw": "\"center\" | \"left\" | \"right\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ top?: string | undefined; inner?: string | undefined; bottom?: string | undefined; } | undefined"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  "TimePickerInput": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/TimePickerInput/TimePickerInput.tsx",
    "description": "",
    "displayName": "@rtdui/dates/TimePickerInput",
    "props": {
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether input value can be cleared, adds clear button to right section",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnChange": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed when date is selected, not applicable when type=\"multiple\"",
        "name": "closeOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownType": {
        "defaultValue": {
          "value": "\"popover\""
        },
        "description": "Type of dropdown, defaults to popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"popover\" | \"modal\" | undefined",
          "raw": "\"popover\" | \"modal\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"popover\""
            },
            {
              "value": "\"modal\""
            }
          ]
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "labelSeparator": {
        "defaultValue": null,
        "description": "Separator between range value",
        "name": "labelSeparator",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "loop": {
        "defaultValue": null,
        "description": "",
        "name": "loop",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((val: string) => void) | undefined"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Input placeholder",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "popoverProps": {
        "defaultValue": null,
        "description": "Props passed down to Popover component",
        "name": "popoverProps",
        "required": false,
        "type": {
          "name": "Partial<Omit<PopoverProps, \"children\">> | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Determines whether the user can modify the value",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "sortDates": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dates value should be sorted before onChange call, only applicable when type=\"multiple\"",
        "name": "sortDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "valueFormatter": {
        "defaultValue": null,
        "description": "A function to format selected dates values into a string. By default, date is formatted based on the input type.",
        "name": "valueFormatter",
        "required": false,
        "type": {
          "name": "DateFormatter | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withSeconds": {
        "defaultValue": null,
        "description": "",
        "name": "withSeconds",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      }
    }
  },
  "WeekdaysRow": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/WeekdaysRow/WeekdaysRow.tsx",
    "description": "",
    "displayName": "@rtdui/dates/WeekdaysRow",
    "props": {
      "cellComponent": {
        "defaultValue": null,
        "description": "Choose cell type that will be used to render weekdays, defaults to th",
        "name": "cellComponent",
        "required": false,
        "type": {
          "name": "\"td\" | \"th\" | undefined",
          "raw": "\"td\" | \"th\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"th\""
            }
          ]
        }
      },
      "firstDayOfWeek": {
        "defaultValue": null,
        "description": "number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday",
        "name": "firstDayOfWeek",
        "required": false,
        "type": {
          "name": "DayOfWeek | undefined",
          "raw": "DayOfWeek | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "0"
            },
            {
              "value": "2"
            },
            {
              "value": "1"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Controls size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "weekdayFormat": {
        "defaultValue": null,
        "description": "date-fns format to get weekday name, defaults to \"dd\"",
        "name": "weekdayFormat",
        "required": false,
        "type": {
          "name": "string | ((date: Date) => ReactNode) | undefined"
        }
      }
    }
  },
  "YearLevel": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/YearLevel/YearLevel.tsx",
    "description": "",
    "displayName": "@rtdui/dates/YearLevel",
    "props": {
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "levelControlAriaLabel": {
        "defaultValue": null,
        "description": "aria-label for change level control",
        "name": "levelControlAriaLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "nextDisabled": {
        "defaultValue": null,
        "description": "Determines whether next control should be disabled, defaults to false",
        "name": "nextDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "onLevelClick": {
        "defaultValue": null,
        "description": "Called when level button is clicked",
        "name": "onLevelClick",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onNext": {
        "defaultValue": null,
        "description": "Called when next button is clicked",
        "name": "onNext",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPrevious": {
        "defaultValue": null,
        "description": "Called when previous button is clicked",
        "name": "onPrevious",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "previousDisabled": {
        "defaultValue": null,
        "description": "Determines whether previous control should be disabled, defaults to false",
        "name": "previousDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": null,
        "description": "Determines whether controls should be separated by spacing, true by default",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withNext": {
        "defaultValue": null,
        "description": "Determines whether next control should be rendered, defaults to true",
        "name": "withNext",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withPrevious": {
        "defaultValue": null,
        "description": "Determines whether previous control should be rendered, defaults to true",
        "name": "withPrevious",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "year": {
        "defaultValue": null,
        "description": "Year that is currently displayed",
        "name": "year",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      }
    }
  },
  "YearLevelGroup": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/YearLevelGroup/YearLevelGroup.tsx",
    "description": "",
    "displayName": "@rtdui/dates/YearLevelGroup",
    "props": {
      "getMonthControlProps": {
        "defaultValue": null,
        "description": "Adds props to month picker control based on date",
        "name": "getMonthControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "hasNextLevel": {
        "defaultValue": null,
        "description": "Determines whether next level button should be enabled, defaults to true",
        "name": "hasNextLevel",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "levelControlAriaLabel": {
        "defaultValue": null,
        "description": "Function that returns level control aria-label based on year date",
        "name": "levelControlAriaLabel",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => string) | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "monthsListFormat": {
        "defaultValue": {
          "value": "\"MMM\""
        },
        "description": "date-fns format for months list",
        "name": "monthsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "nextDisabled": {
        "defaultValue": null,
        "description": "Determines whether next control should be disabled, defaults to false",
        "name": "nextDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "nextIcon": {
        "defaultValue": null,
        "description": "Change next icon",
        "name": "nextIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "nextLabel": {
        "defaultValue": null,
        "description": "aria-label for next button",
        "name": "nextLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onLevelClick": {
        "defaultValue": null,
        "description": "Called when level button is clicked",
        "name": "onLevelClick",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onNext": {
        "defaultValue": null,
        "description": "Called when next button is clicked",
        "name": "onNext",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "onPrevious": {
        "defaultValue": null,
        "description": "Called when previous button is clicked",
        "name": "onPrevious",
        "required": false,
        "type": {
          "name": "(() => void) | undefined"
        }
      },
      "previousDisabled": {
        "defaultValue": null,
        "description": "Determines whether previous control should be disabled, defaults to false",
        "name": "previousDisabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "previousIcon": {
        "defaultValue": null,
        "description": "Change previous icon",
        "name": "previousIcon",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "previousLabel": {
        "defaultValue": null,
        "description": "aria-label for previous button",
        "name": "previousLabel",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": null,
        "description": "Determines whether controls should be separated by spacing, true by default",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "year": {
        "defaultValue": null,
        "description": "Year that is currently displayed",
        "name": "year",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "yearLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display year label or a function that returns year label based on year value",
        "name": "yearLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((year: Date) => ReactNode) | undefined"
        }
      }
    }
  },
  "YearPicker": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/YearPicker/YearPicker.tsx",
    "description": "",
    "displayName": "@rtdui/dates/YearPicker",
    "props": {
      "allowDeselect": {
        "defaultValue": null,
        "description": "Determines whether user can deselect the date by clicking on selected item, applicable only when type=\"default\"",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "allowSingleDateInRange": {
        "defaultValue": null,
        "description": "Determines whether single year can be selected as range, applicable only when type=\"range\"",
        "name": "allowSingleDateInRange",
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultDate": {
        "defaultValue": null,
        "description": "Initial date that is displayed, used for uncontrolled component",
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: DateValue) => void) | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onYearSelect": {
        "defaultValue": null,
        "description": "Called when year is selected",
        "name": "onYearSelect",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Picker type: range, multiple or default",
        "name": "type",
        "required": false,
        "type": {
          "name": "DatePickerType | undefined",
          "raw": "DatePickerType | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"range\""
            },
            {
              "value": "\"default\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "YearPickerInput": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/YearPickerInput/YearPickerInput.tsx",
    "description": "",
    "displayName": "@rtdui/dates/YearPickerInput",
    "props": {
      "allowDeselect": {
        "defaultValue": null,
        "description": "Determines whether user can deselect the date by clicking on selected item, applicable only when type=\"default\"",
        "name": "allowDeselect",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "allowSingleDateInRange": {
        "defaultValue": null,
        "description": "Determines whether single year can be selected as range, applicable only when type=\"range\"",
        "name": "allowSingleDateInRange",
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "ariaLabels": {
        "defaultValue": null,
        "description": "aria-label attributes for controls on different levels",
        "name": "ariaLabels",
        "required": false,
        "type": {
          "name": "CalendarAriaLabels | undefined"
        }
      },
      "clearButtonProps": {
        "defaultValue": null,
        "description": "Props passed down to clear button",
        "name": "clearButtonProps",
        "required": false,
        "type": {
          "name": "Omit<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"ref\"> | undefined"
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether input value can be cleared, adds clear button to right section",
        "name": "clearable",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "closeOnChange": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dropdown should be closed when date is selected, not applicable when type=\"multiple\"",
        "name": "closeOnChange",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "columnsToScroll": {
        "defaultValue": null,
        "description": "Number of columns to scroll when user clicks next/prev buttons, defaults to numberOfColumns",
        "name": "columnsToScroll",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "Date that is displayed, used for controlled component",
        "name": "date",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "decadeLabelFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format string label format to display decade label or a function that returns decade label based on date value",
        "name": "decadeLabelFormat",
        "required": false,
        "type": {
          "name": "string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode) | undefined"
        }
      },
      "defaultDate": {
        "defaultValue": null,
        "description": "Initial date that is displayed, used for uncontrolled component",
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Default value for uncontrolled component",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Description</code> component. If not set, description is not rendered.",
        "name": "description",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "descriptionProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Description</code> component",
        "name": "descriptionProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Sets <code>disabled</code> attribute on the <code>input</code> element",
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "dropdownType": {
        "defaultValue": {
          "value": "\"popover\""
        },
        "description": "Type of dropdown, defaults to popover",
        "name": "dropdownType",
        "required": false,
        "type": {
          "name": "\"popover\" | \"modal\" | undefined",
          "raw": "\"popover\" | \"modal\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"popover\""
            },
            {
              "value": "\"modal\""
            }
          ]
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Determines whether the input should have error styles and <code>aria-invalid</code> attribute",
        "name": "error",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "errorProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Error</code> component",
        "name": "errorProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Static id used as base to generate <code>aria-</code> attributes, by default generates random id",
        "name": "id",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "inputContainer": {
        "defaultValue": {
          "value": "(children) => children"
        },
        "description": "Input container component",
        "name": "inputContainer",
        "required": false,
        "type": {
          "name": "((children: ReactNode) => ReactNode) | undefined"
        }
      },
      "inputWrapperOrder": {
        "defaultValue": {
          "value": "['label', 'description', 'input', 'error']"
        },
        "description": "Controls order of the elements",
        "name": "inputWrapperOrder",
        "required": false,
        "type": {
          "name": "(\"input\" | \"label\" | \"error\" | \"description\")[] | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Contents of <code>Input.Label</code> component. If not set, label is not rendered.",
        "name": "label",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "labelElement": {
        "defaultValue": {
          "value": "\"label\""
        },
        "description": "<code>Input.Label</code> root element",
        "name": "labelElement",
        "required": false,
        "type": {
          "name": "\"div\" | \"label\" | undefined",
          "raw": "\"div\" | \"label\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"label\""
            }
          ]
        }
      },
      "labelProps": {
        "defaultValue": null,
        "description": "Props passed down to the <code>Input.Label</code> component",
        "name": "labelProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "labelSeparator": {
        "defaultValue": null,
        "description": "Separator between range value",
        "name": "labelSeparator",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "leftSection": {
        "defaultValue": null,
        "description": "Content section rendered on the left side of the input",
        "name": "leftSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "leftSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "leftSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "leftSectionWidth": {
        "defaultValue": null,
        "description": "Left section width, used to set <code>width</code> of the section and input <code>padding-left</code>, by default equals to the input height",
        "name": "leftSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "multiline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input can have multiple lines, for example when <code>component=\"textarea\"</code>",
        "name": "multiline",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "numberOfColumns": {
        "defaultValue": null,
        "description": "Number of columns to render next to each other",
        "name": "numberOfColumns",
        "required": false,
        "type": {
          "name": "number | undefined"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when value changes",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "((value: DateValue) => void) | undefined"
        }
      },
      "onDateChange": {
        "defaultValue": null,
        "description": "Called when date changes",
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onNextDecade": {
        "defaultValue": null,
        "description": "Called when next decade button is clicked",
        "name": "onNextDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "onPreviousDecade": {
        "defaultValue": null,
        "description": "Called when previous decade button is clicked",
        "name": "onPreviousDecade",
        "required": false,
        "type": {
          "name": "((date: Date) => void) | undefined"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Input placeholder",
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "pointer": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the input should have <code>cursor: pointer</code> style",
        "name": "pointer",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "popoverProps": {
        "defaultValue": null,
        "description": "Props passed down to Popover component",
        "name": "popoverProps",
        "required": false,
        "type": {
          "name": "Partial<Omit<PopoverProps, \"children\">> | undefined"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "\"md\""
        },
        "description": "Key of <code>theme.radius</code> or any valid CSS value to set <code>border-radius</code>, numbers are converted to rem",
        "name": "radius",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "Determines whether the user can modify the value",
        "name": "readOnly",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Sets <code>required</code> attribute on the <code>input</code> element",
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "rightSection": {
        "defaultValue": null,
        "description": "Content section rendered on the right side of the input",
        "name": "rightSection",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "rightSectionPointerEvents": {
        "defaultValue": {
          "value": "\"none\""
        },
        "description": "Sets <code>pointer-events</code> styles on the <code>rightSection</code> element",
        "name": "rightSectionPointerEvents",
        "required": false,
        "type": {
          "name": "PointerEvents | undefined",
          "raw": "PointerEvents | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"all\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fill\""
            },
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"painted\""
            },
            {
              "value": "\"stroke\""
            },
            {
              "value": "\"visible\""
            },
            {
              "value": "\"visibleFill\""
            },
            {
              "value": "\"visiblePainted\""
            },
            {
              "value": "\"visibleStroke\""
            }
          ]
        }
      },
      "rightSectionWidth": {
        "defaultValue": null,
        "description": "Right section width, used to set <code>width</code> of the section and input <code>padding-right</code>, by default equals to the input height",
        "name": "rightSectionWidth",
        "required": false,
        "type": {
          "name": "Width<string | number> | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "slots": {
        "defaultValue": null,
        "description": "",
        "name": "slots",
        "required": false,
        "type": {
          "name": "{ left?: string | undefined; input?: string | undefined; right?: string | undefined; } | undefined"
        }
      },
      "sortDates": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether dates value should be sorted before onChange call, only applicable when type=\"multiple\"",
        "name": "sortDates",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Picker type: range, multiple or default",
        "name": "type",
        "required": false,
        "type": {
          "name": "DatePickerType | undefined",
          "raw": "DatePickerType | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"range\""
            },
            {
              "value": "\"default\""
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value for controlled component",
        "name": "value",
        "required": false,
        "type": {
          "name": "DateValue | undefined"
        }
      },
      "valueFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format to display input value",
        "name": "valueFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "valueFormatter": {
        "defaultValue": null,
        "description": "A function to format selected dates values into a string. By default, date is formatted based on the input type.",
        "name": "valueFormatter",
        "required": false,
        "type": {
          "name": "DateFormatter | undefined"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "\"outline\""
        },
        "description": "input variant",
        "name": "variant",
        "required": false,
        "type": {
          "name": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "raw": "\"outline\" | \"default\" | \"ghost\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"outline\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"ghost\""
            }
          ]
        }
      },
      "withAria": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether <code>aria-</code> and other accessibility attributes should be added to the input",
        "name": "withAria",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withAsterisk": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether the required asterisk should be displayed. Overrides <code>required</code> prop. Does not add required attribute to the input.",
        "name": "withAsterisk",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "withErrorStyles": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether the input should have red border and red text color when the <code>error</code> prop is set",
        "name": "withErrorStyles",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "wrapperProps": {
        "defaultValue": null,
        "description": "Props passed down to the root element of the <code>Input</code> component",
        "name": "wrapperProps",
        "required": false,
        "type": {
          "name": "Record<string, any> | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "YearsList": {
    "filePath": "D:/sources/github/rtdui/packages/dates/src/components/YearsList/YearsList.tsx",
    "description": "",
    "displayName": "@rtdui/dates/YearsList",
    "props": {
      "decade": {
        "defaultValue": null,
        "description": "Decade for which years list should be displayed",
        "name": "decade",
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "getYearControlProps": {
        "defaultValue": null,
        "description": "Adds props to year picker control based on date",
        "name": "getYearControlProps",
        "required": false,
        "type": {
          "name": "((date: Date) => Partial<PickerControlProps>) | undefined"
        }
      },
      "locale": {
        "defaultValue": null,
        "description": "date-fns locale, defaults to value defined in DatesProvider",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Locale | undefined"
        }
      },
      "maxDate": {
        "defaultValue": null,
        "description": "Maximum possible date",
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "minDate": {
        "defaultValue": null,
        "description": "Minimum possible date",
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date | undefined"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Component size",
        "name": "size",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      },
      "withCellSpacing": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Determines whether controls should be separated by spacing",
        "name": "withCellSpacing",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "yearsListFormat": {
        "defaultValue": {
          "value": "\"yyyy\""
        },
        "description": "date-fns format for years list",
        "name": "yearsListFormat",
        "required": false,
        "type": {
          "name": "string | undefined"
        }
      }
    }
  },
  "@rtdui/ControlBase": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/ControlBase.tsx",
    "description": "",
    "displayName": "@rtdui/ControlBase",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "TiptapControlsGroup": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/ControlsGroup.tsx",
    "description": "",
    "displayName": "TiptapControlsGroup",
    "props": {}
  },
  "createTiptapControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/createTiptapControl.tsx",
    "description": "",
    "displayName": "createTiptapControl",
    "props": {
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "required": true,
        "type": {
          "name": "FC<{ size: string | number; }>"
        }
      },
      "isActive": {
        "defaultValue": null,
        "description": "",
        "name": "isActive",
        "required": false,
        "type": {
          "name": "{ name: string; attributes?: string | Record<string, any> | undefined; } | undefined"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "required": true,
        "type": {
          "name": "keyof ControlLabels",
          "raw": "keyof ControlLabels",
          "value": [
            {
              "value": "\"boldControlLabel\""
            },
            {
              "value": "\"hrControlLabel\""
            },
            {
              "value": "\"italicControlLabel\""
            },
            {
              "value": "\"underlineControlLabel\""
            },
            {
              "value": "\"strikeControlLabel\""
            },
            {
              "value": "\"clearFormattingControlLabel\""
            },
            {
              "value": "\"linkControlLabel\""
            },
            {
              "value": "\"unlinkControlLabel\""
            },
            {
              "value": "\"bulletListControlLabel\""
            },
            {
              "value": "\"orderedListControlLabel\""
            },
            {
              "value": "\"h1ControlLabel\""
            },
            {
              "value": "\"h2ControlLabel\""
            },
            {
              "value": "\"h3ControlLabel\""
            },
            {
              "value": "\"h4ControlLabel\""
            },
            {
              "value": "\"h5ControlLabel\""
            },
            {
              "value": "\"h6ControlLabel\""
            },
            {
              "value": "\"blockquoteControlLabel\""
            },
            {
              "value": "\"alignLeftControlLabel\""
            },
            {
              "value": "\"alignCenterControlLabel\""
            },
            {
              "value": "\"alignRightControlLabel\""
            },
            {
              "value": "\"alignJustifyControlLabel\""
            },
            {
              "value": "\"codeControlLabel\""
            },
            {
              "value": "\"codeBlockControlLabel\""
            },
            {
              "value": "\"subscriptControlLabel\""
            },
            {
              "value": "\"superscriptControlLabel\""
            },
            {
              "value": "\"colorPickerControlLabel\""
            },
            {
              "value": "\"unsetColorControlLabel\""
            },
            {
              "value": "\"highlightControlLabel\""
            },
            {
              "value": "\"colorControlLabel\""
            },
            {
              "value": "\"linkEditorInputLabel\""
            },
            {
              "value": "\"linkEditorInputPlaceholder\""
            },
            {
              "value": "\"linkEditorExternalLink\""
            },
            {
              "value": "\"linkEditorInternalLink\""
            },
            {
              "value": "\"linkEditorSave\""
            },
            {
              "value": "\"colorPickerCancel\""
            },
            {
              "value": "\"colorPickerClear\""
            },
            {
              "value": "\"colorPickerColorPicker\""
            },
            {
              "value": "\"colorPickerPalette\""
            },
            {
              "value": "\"colorPickerSave\""
            },
            {
              "value": "\"colorPickerColorLabel\""
            },
            {
              "value": "\"ImageControlLabel\""
            },
            {
              "value": "\"TableControlLabel\""
            },
            {
              "value": "\"HelperControlLabel\""
            }
          ]
        }
      },
      "operation": {
        "defaultValue": null,
        "description": "",
        "name": "operation",
        "required": true,
        "type": {
          "name": "{ name: string; attributes?: string | Record<string, any> | undefined; }"
        }
      }
    }
  },
  "EditorControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/EditorControl.tsx",
    "description": "",
    "displayName": "@rtdui/editor/EditorControl",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Child editor components",
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "editor": {
        "defaultValue": null,
        "description": "Tiptap editor instance",
        "name": "editor",
        "required": true,
        "type": {
          "name": "Editor"
        }
      },
      "labels": {
        "defaultValue": null,
        "description": "Labels that are used in controls",
        "name": "labels",
        "required": false,
        "type": {
          "name": "Partial<ControlLabels> | undefined"
        }
      }
    }
  },
  "HelperControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/HelperControl.tsx",
    "description": "",
    "displayName": "@rtdui/editor/HelperControl",
    "props": {}
  },
  "BoldControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "BoldControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "ItalicControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "ItalicControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "UnderlineControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "UnderlineControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "StrikeThroughControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "StrikeThroughControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "ClearFormattingControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "ClearFormattingControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "UnlinkControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "UnlinkControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "BulletListControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "BulletListControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "OrderedListControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "OrderedListControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "H1Control": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "H1Control",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "H2Control": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "H2Control",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "H3Control": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "H3Control",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "H4Control": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "H4Control",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "H5Control": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "H5Control",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "H6Control": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "H6Control",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "BlockquoteControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "BlockquoteControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "AlignLeftControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "AlignLeftControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "AlignRightControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "AlignRightControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "AlignCenterControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "AlignCenterControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "AlignJustifyControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "AlignJustifyControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "SubscriptControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "SubscriptControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "SuperscriptControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "SuperscriptControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "CodeControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "CodeControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "CodeBlockControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "CodeBlockControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "HighlightControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "HighlightControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "HrControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "HrControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "UnsetColorControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "UnsetColorControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "ImageControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "ImageControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "TableControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/tiptapControls.tsx",
    "description": "",
    "displayName": "TableControl",
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Determines whether the control should have active state, false by default",
        "name": "active",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon component, should support size prop",
        "name": "icon",
        "required": false,
        "type": {
          "name": "FC<{ size: string | number; }> | undefined"
        }
      },
      "interactive": {
        "defaultValue": null,
        "description": "Determines whether the control can be interacted with, set false to make the control to act as a label",
        "name": "interactive",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "ToolbarControl": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_controls/ToolbarControl.tsx",
    "description": "",
    "displayName": "@rtdui/editor/ToolbarControl",
    "props": {
      "sticky": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Determines whether position: sticky styles should be added to the toolbar",
        "name": "sticky",
        "required": false,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "gfm": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/plugins/gfm/index.tsx",
    "description": "",
    "displayName": "gfm",
    "props": {
      "locale": {
        "defaultValue": null,
        "description": "",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Partial<Locale> | undefined"
        }
      }
    }
  },
  "math": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/plugins/math/index.tsx",
    "description": "",
    "displayName": "math",
    "props": {
      "locale": {
        "defaultValue": null,
        "description": "",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Partial<Locale> | undefined"
        }
      }
    }
  },
  "mermaid": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/plugins/mermaid/index.tsx",
    "description": "",
    "displayName": "mermaid",
    "props": {
      "locale": {
        "defaultValue": null,
        "description": "",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Partial<Locale> | undefined"
        }
      }
    }
  },
  "toc": {
    "filePath": "D:/sources/github/rtdui/packages/md-editor/src/plugins/toc/index.tsx",
    "description": "",
    "displayName": "toc",
    "props": {
      "locale": {
        "defaultValue": null,
        "description": "",
        "name": "locale",
        "required": false,
        "type": {
          "name": "Partial<Locale> | undefined"
        }
      },
      "slugOptions": {
        "defaultValue": null,
        "description": "",
        "name": "slugOptions",
        "required": false,
        "type": {
          "name": "Options | undefined"
        }
      },
      "tocOptions": {
        "defaultValue": null,
        "description": "",
        "name": "tocOptions",
        "required": false,
        "type": {
          "name": "Options | undefined"
        }
      }
    }
  },
  "FloatingArrow": {
    "filePath": "D:/sources/github/rtdui/packages/core/src/Popover/Floating/FloatingArrow/FloatingArrow.tsx",
    "description": "",
    "displayName": "@rtdui/core/FloatingArrow",
    "props": {
      "arrowOffset": {
        "defaultValue": null,
        "description": "",
        "name": "arrowOffset",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "arrowPosition": {
        "defaultValue": null,
        "description": "",
        "name": "arrowPosition",
        "required": true,
        "type": {
          "name": "ArrowPosition",
          "raw": "ArrowPosition",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"side\""
            }
          ]
        }
      },
      "arrowRadius": {
        "defaultValue": null,
        "description": "",
        "name": "arrowRadius",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "arrowSize": {
        "defaultValue": null,
        "description": "",
        "name": "arrowSize",
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "arrowX": {
        "defaultValue": null,
        "description": "",
        "name": "arrowX",
        "required": true,
        "type": {
          "name": "number | undefined"
        }
      },
      "arrowY": {
        "defaultValue": null,
        "description": "",
        "name": "arrowY",
        "required": true,
        "type": {
          "name": "number | undefined"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "required": true,
        "type": {
          "name": "FloatingPosition",
          "raw": "FloatingPosition",
          "value": [
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"top\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"left-end\""
            },
            {
              "value": "\"left-start\""
            },
            {
              "value": "\"right-end\""
            },
            {
              "value": "\"right-start\""
            },
            {
              "value": "\"top-end\""
            },
            {
              "value": "\"top-start\""
            },
            {
              "value": "\"bottom-end\""
            },
            {
              "value": "\"bottom-start\""
            }
          ]
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "",
        "name": "visible",
        "required": true,
        "type": {
          "name": "boolean | undefined"
        }
      }
    }
  },
  "ImageResizableComponent": {
    "filePath": "D:/sources/github/rtdui/packages/editor/src/RichTextEditor/tiptap_extensions/extension-image-upload/ImageResizableComponent.tsx",
    "description": "",
    "displayName": "ImageResizableComponent",
    "props": {}
  }
}
